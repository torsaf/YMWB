"""
–ú–æ–¥—É–ª—å price_updater_master –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
–Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö Yandex.Market, Ozon –∏ Wildberries —á–µ—Ä–µ–∑ –∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API.

–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è:

- update_yandex:
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ Yandex.Market.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API —Å —Ä–∞—Å—á—ë—Ç–æ–º discountBase.

- update_ozon:
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ Ozon.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç old_price —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 15%.

- update_wildberries:
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª—ã –∏ —Ü–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—ã —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 25% –∏ —Å–∫–∏–¥–∫–æ–π 16% –Ω–∞ Wildberries.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–∞, –≤–∫–ª—é—á–∞—è 208 –∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –æ—à–∏–±–∫–∏.

- update_all_prices:
    –í—ã–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏.

–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ loguru
–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤ Telegram —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É notifiers.
"""

import os
import sqlite3
import math
import json
import requests
from loguru import logger
from dotenv import load_dotenv
from notifiers import get_notifier

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path=os.path.join("System", ".env"))

# Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
telegram = get_notifier('telegram')
telegram_got_token_error = os.getenv('telegram_got_token_error')
telegram_chat_id_error = os.getenv('telegram_chat_id_error')

def notify_error(marketplace, error):
    message = f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –Ω–∞ {marketplace}:\n{error}"
    telegram.notify(token=telegram_got_token_error, chat_id=telegram_chat_id_error, message=message)

# ----------- YANDEX -----------
def update_yandex():
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ Yandex Market")
    try:
        conn = sqlite3.connect('System/marketplace_base.db', timeout=10)
        cursor = conn.cursor()
        cursor.execute("SELECT `–ê—Ä—Ç_MC`, `–¶–µ–Ω–∞ YM` FROM yandex WHERE `–ê—Ä—Ç_MC` IS NOT NULL AND `–¶–µ–Ω–∞ YM` IS NOT NULL")
        rows = cursor.fetchall()
        logger.debug(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–ª—è Yandex")
        conn.close()

        offers = []
        for offer_id, price in rows:
            price = int(price)
            discount_base = int(math.ceil(price * 1.18 / 100.0)) * 100
            offers.append({
                "offerId": str(offer_id).strip(),
                "price": {
                    "value": price,
                    "currencyId": "RUR",
                    "discountBase": discount_base
                }
            })
        ym_token = os.getenv('ym_token')
        businessId = os.getenv('businessId')
        url = f'https://api.partner.market.yandex.ru/businesses/{businessId}/offer-prices/updates'
        headers = {
            "Authorization": f"Bearer {ym_token}",
            "Content-Type": "application/json"
        }
        logger.info(f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(offers)} —Ü–µ–Ω –≤ Yandex Market...")
        response = requests.post(url, headers=headers, json={"offers": offers}, timeout=10)
        logger.info(f"üì° Yandex API: {response.status_code}")
        if response.status_code != 200:
            logger.warning(f"‚ö† –û—Ç–≤–µ—Ç –æ—Ç Yandex API: {response.text}")
            raise Exception(f"YM: –°—Ç–∞—Ç—É—Å-–∫–æ–¥ {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        logger.success("‚úÖ –¶–µ–Ω—ã Yandex —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    except Exception as e:
        notify_error("Yandex Market", e)

# ----------- OZON -----------
def update_ozon():
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ Ozon")
    try:
        conn = sqlite3.connect('System/marketplace_base.db')
        cursor = conn.cursor()
        cursor.execute("SELECT `–ê—Ä—Ç_MC`, `–¶–µ–Ω–∞ OZ` FROM ozon WHERE `–ê—Ä—Ç_MC` IS NOT NULL AND `–¶–µ–Ω–∞ OZ` IS NOT NULL")
        rows = cursor.fetchall()
        logger.debug(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–ª—è Ozon")
        conn.close()

        prices = []
        for offer_id, price in rows:
            price = float(price)
            old_price = int(round(price * 1.15))
            prices.append({
                "offer_id": str(offer_id).strip(),
                "price": str(int(price)),
                "old_price": str(old_price),
                "isDeleted": False
            })

        ozon_client_id = os.getenv('ozon_client_ID')
        ozon_api_key = os.getenv('ozon_API_key')
        url = 'https://api-seller.ozon.ru/v1/product/import/prices'
        headers = {
            'Client-Id': ozon_client_id,
            'Api-Key': ozon_api_key,
            'Content-Type': 'application/json'
        }
        logger.info(f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(prices)} —Ü–µ–Ω –≤ Ozon...")
        response = requests.post(url, headers=headers, data=json.dumps({"prices": prices}), timeout=10)
        logger.info(f"üì° Ozon API: {response.status_code}")
        if response.status_code != 200:
            logger.warning(f"‚ö† –û—Ç–≤–µ—Ç –æ—Ç Ozon API: {response.text}")
            raise Exception(f"Ozon: –°—Ç–∞—Ç—É—Å-–∫–æ–¥ {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        logger.success("‚úÖ –¶–µ–Ω—ã Ozon —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    except Exception as e:
        notify_error("Ozon", e)

# ----------- WILDBERRIES -----------
def update_wildberries():
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ Wildberries")
    try:
        conn = sqlite3.connect('System/marketplace_base.db')
        cursor = conn.cursor()
        cursor.execute("SELECT `WB –ê—Ä—Ç–∏–∫—É–ª`, `–¶–µ–Ω–∞ WB` FROM wildberries WHERE `WB –ê—Ä—Ç–∏–∫—É–ª` IS NOT NULL AND `–¶–µ–Ω–∞ WB` IS NOT NULL")
        rows = cursor.fetchall()
        logger.debug(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–ª—è Wildberries")
        conn.close()

        data = []
        for wb_id, price in rows:
            base_price = int(price)
            final_price = int(round((base_price * 1.20) / 100.0)) * 100  # +25%, –æ–∫—Ä—É–≥–ª—è–µ–º
            data.append({
                "nmID": int(wb_id),
                "price": final_price,
                "discount": 16
            })

        wb_token = os.getenv('wb_token')
        url = 'https://discounts-prices-api.wildberries.ru/api/v2/upload/task'
        headers = {
            'Authorization': wb_token,
            'Content-Type': 'application/json'
        }

        response = requests.post(url, headers=headers, json={"data": data}, timeout=10)
        logger.info(f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(data)} —Ü–µ–Ω –≤ Wildberries...")
        if response.status_code != 200:
            logger.warning(f"‚ö† –û—Ç–≤–µ—Ç –æ—Ç Wildberries API: {response.text}")
            error_text = response.json().get('errorText', '')
            if response.status_code == 208 or \
               (response.status_code == 400 and ("No goods" in error_text or "already set" in error_text.lower())):
                logger.success("‚úÖ –¶–µ–Ω—ã Wildberries —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                return
            raise Exception(f"WB: –°—Ç–∞—Ç—É—Å-–∫–æ–¥ {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        logger.success("‚úÖ –¶–µ–Ω—ã Wildberries —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


    except Exception as e:
        notify_error("Wildberries", e)

# ----------- –ì–õ–ê–í–ù–´–ô –í–´–ó–û–í -----------
def update_all_prices():
    update_yandex()
    update_ozon()
    update_wildberries()
    logger.info("üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
