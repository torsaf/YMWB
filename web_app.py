from flask import Flask, render_template, request, redirect, url_for, jsonify
from apscheduler.schedulers.background import BackgroundScheduler
from update_sklad import gen_sklad, update_sklad_db, upsert_ymwb_prices_from_sklad
from auto_stock_updater import update
from datetime import datetime
import pandas as pd
from flask import session, Response
from functools import wraps
from dotenv import load_dotenv
import os
import requests
from logger_config import logger, LOG_DIR
from pathlib import Path
from datetime import timedelta
import stock
import json
import sqlite3
import shutil
import glob
from threading import Lock
from flask import send_file
from copy import deepcopy
from io import BytesIO
from unlisted import generate_unlisted
from ozon_actions import remove_all_products_from_all_actions


last_download_time = None
LAST_UPDATE_FILE = "System/last_update.txt"
FLAGS_PATH = "System/stock_flags.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (True = –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏, False = –≤—Å—ë –æ–±–Ω—É–ª—è–µ—Ç—Å—è)
global_stock_flags = {
    "yandex": True,
    "ozon": True,
    "wildberries": True
}
toggle_lock = Lock()

def send_telegram_message(message: str):
    stock.telegram.notify(
        token=stock.telegram_got_token_error,
        chat_id=stock.telegram_chat_id_error,
        message=message
    )


def disable_invask_if_needed():
    try:
        current = global_stock_flags.get("suppliers", {}).get("Invask", True)
        if current:
            logger.info("‚è±Ô∏è CRON: –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî Invask —Å–µ–π—á–∞—Å ON ‚Üí –≤—ã–∫–ª—é—á–∞–µ–º (toggle)")
            requests.post("http://127.0.0.1:5050/toggle_supplier/Invask")
        else:
            logger.info("‚è±Ô∏è CRON: –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî Invask —É–∂–µ OFF ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
    except Exception as e:
        logger.warning(f"‚ùå CRON: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Invask: {e}")


def enable_invask_if_needed():
    try:
        current = global_stock_flags.get("suppliers", {}).get("Invask", True)
        if not current:
            logger.info("‚è±Ô∏è CRON: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî Invask —Å–µ–π—á–∞—Å OFF ‚Üí –≤–∫–ª—é—á–∞–µ–º (toggle)")
            requests.post("http://127.0.0.1:5050/toggle_supplier/Invask")
        else:
            logger.info("‚è±Ô∏è CRON: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî Invask —É–∂–µ ON ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
    except Exception as e:
        logger.warning(f"‚ùå CRON: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ Invask: {e}")

def disable_okno_if_needed():
    try:
        current = global_stock_flags.get("suppliers", {}).get("Okno", True)
        if current:
            logger.info("‚è±Ô∏è CRON: –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî Okno —Å–µ–π—á–∞—Å ON ‚Üí –≤—ã–∫–ª—é—á–∞–µ–º (toggle)")
            requests.post("http://127.0.0.1:5050/toggle_supplier/Okno")
        else:
            logger.info("‚è±Ô∏è CRON: –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî Okno —É–∂–µ OFF ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
    except Exception as e:
        logger.warning(f"‚ùå CRON: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Okno: {e}")

def enable_okno_if_needed():
    try:
        current = global_stock_flags.get("suppliers", {}).get("Okno", True)
        if not current:
            logger.info("‚è±Ô∏è CRON: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî Okno —Å–µ–π—á–∞—Å OFF ‚Üí –≤–∫–ª—é—á–∞–µ–º (toggle)")
            requests.post("http://127.0.0.1:5050/toggle_supplier/Okno")
        else:
            logger.info("‚è±Ô∏è CRON: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî Okno —É–∂–µ ON ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
    except Exception as e:
        logger.warning(f"‚ùå CRON: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ Okno: {e}")


def backup_database():
    os.makedirs("System/backups", exist_ok=True)
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    backup_filename = f"System/backups/marketplace_base_{timestamp}.db"

    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É
    shutil.copy("System/marketplace_base.db", backup_filename)
    logger.info(f"üíæ –ë—ç–∫–∞–ø –±–∞–∑—ã —Å–æ–∑–¥–∞–Ω: {backup_filename}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
    backup_files = sorted(
        glob.glob("System/backups/marketplace_base_*.db"),
        key=os.path.getmtime,
        reverse=True
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14
    for old_file in backup_files[14:]:
        try:
            os.remove(old_file)
            logger.info(f"üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_file}")
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {old_file}: {e}")

def get_last_download_time():
    if os.path.exists(LAST_UPDATE_FILE):
        with open(LAST_UPDATE_FILE, "r") as f:
            return f.read().strip()
    return None


def update_sklad_task():
    try:
        with toggle_lock:
            logger.success("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ update_sklad.py...")

            # 1) –¢—è–Ω–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞
            df = gen_sklad()

            # 2) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º !YMWB.db/prices (Sklad): UPDATE/INSERT + DELETE –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
            upsert_ymwb_prices_from_sklad(df)

            # 3) –û–±–Ω–æ–≤–ª—è–µ–º marketplace_base.db –∏–∑ —Å–∫–ª–∞–¥–∞ (–ù–∞–ª/–û–ü–¢/–¶–µ–Ω–∞)
            update_sklad_db(df)

            # 4) –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –≤—Å–µ–π –±–∞–∑–µ (—É–∂–µ –ø–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–º—É !YMWB.db)
            update(global_stock_flags)

            # 5) –¢–æ—á–µ—á–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –ú–ü (–æ—Å—Ç–∞–≤–ª—è–µ–º, –∫–∞–∫ —É —Ç–µ–±—è)
            for _mp in ('yandex', 'ozon', 'wildberries'):
                try:
                    recompute_marketplace_core(_mp)
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –¥–ª—è {_mp}: {e}")

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É ...

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
            with open(LAST_UPDATE_FILE, "w") as f:
                f.write(datetime.now().strftime("%d.%m.%Y - %H:%M"))
            logger.success("‚úÖ –°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
            global last_download_time
            last_download_time = datetime.now().strftime("%d.%m.%Y - %H:%M")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞")


def load_stock_flags():
    try:
        with open(FLAGS_PATH, 'r') as f:
            flags = json.load(f)
            if "suppliers" not in flags:
                flags["suppliers"] = {}
            return flags
    except Exception:
        return {
            "yandex": True,
            "ozon": True,
            "wildberries": True,
            "suppliers": {}
        }


SUPPLIERS = ['Invask', 'Okno', 'United']  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ —Ä–∞–≤–Ω—ã—Ö —Ü–µ–Ω–∞—Ö: Invask > Okno > United (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å)

# –ö—ç—à–∏—Ä—É–µ–º –∞–≤—Ç–æ-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –ü–æ—Å—Ç–∞–≤—â–∏–∫/–ê—Ä—Ç–∏–∫—É–ª/–ù–∞–ª–∏—á–∏–µ/–û–ü–¢
_SUP_TBL_CACHE = None
_SUP_DB_PATH = "System/!YMWB.db"

def _detect_suppliers_table(conn) -> str | None:
    global _SUP_TBL_CACHE
    if _SUP_TBL_CACHE:
        return _SUP_TBL_CACHE
    try:
        cur = conn.cursor()
        # 1) –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
        for name in ("prices", "stocks"):
            cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (name,))
            if cur.fetchone():
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                cur.execute(f'PRAGMA table_info("{name}")')
                cols = {r[1] for r in cur.fetchall()}
                need = {"–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢"}
                if need.issubset(cols):
                    _SUP_TBL_CACHE = name
                    logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Å—Ç–∞—Ç–∫–æ–≤: {name}")
                    return name
        # 2) –ò—â–µ–º –ª—é–±—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é
        cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
        for (tname,) in cur.fetchall():
            cur.execute(f'PRAGMA table_info("{tname}")')
            cols = {r[1] for r in cur.fetchall()}
            if {"–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢"}.issubset(cols):
                _SUP_TBL_CACHE = tname
                logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Å—Ç–∞—Ç–∫–æ–≤: {tname}")
                return tname
    except Exception as e:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ !YMWB.db: {e}")
    return None

def _fetch_stock_for(conn_unused, supplier: str, code: str):
    if not code or not str(code).strip():
        return 0, None
    try:
        sup_conn = sqlite3.connect("System/!YMWB.db", timeout=5)
        cur = sup_conn.cursor()
        # –ë–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –ø–æ –ü–æ—Å—Ç–∞–≤—â–∏–∫—É + —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –≤ –ê—Ä—Ç–∏–∫—É–ª–µ
        cur.execute("""
            SELECT COALESCE("–ù–∞–ª–∏—á–∏–µ",0), "–û–ü–¢"
              FROM prices
             WHERE UPPER(TRIM("–ü–æ—Å—Ç–∞–≤—â–∏–∫")) = UPPER(?)
               AND (
                    REPLACE(REPLACE(REPLACE(CAST("–ê—Ä—Ç–∏–∫—É–ª" AS TEXT), ' ', ''), ' ', ''), CHAR(9), '') 
                        = REPLACE(REPLACE(REPLACE(?, ' ', ''), ' ', ''), CHAR(9), '')
                 OR REPLACE(REPLACE(REPLACE(LTRIM(CAST("–ê—Ä—Ç–∏–∫—É–ª" AS TEXT), '0'), ' ', ''), ' ', ''), CHAR(9), '')
                        = REPLACE(REPLACE(REPLACE(LTRIM(?, '0'), ' ', ''), ' ', ''), CHAR(9), '')
               )
             LIMIT 1
        """, (supplier, str(code).strip(), str(code).strip()))
        row = cur.fetchone()
    except Exception as e:
        logger.warning(f"‚ùå SUPPLIERS_DB read failed: {e}")
        row = None
    finally:
        try: sup_conn.close()
        except: pass

    if not row:
        return 0, None

    nal, opt = row
    try: nal = int(str(nal).strip() or 0)
    except: nal = 0
    try: opt = float(str(opt).replace(' ', '').replace('—Ä.', '')) if opt is not None else None
    except: opt = None
    return nal, opt

def choose_best_supplier_for_row(row: dict, conn, use_row_sklad: bool = True) -> tuple[str, int, float]:
    """
    –í—Ö–æ–¥: row ‚Äî dict –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ marketplace (—Å –ø–æ–ª—è–º–∏ Sklad, Invask, Okno, United, ...).
    –í—ã—Ö–æ–¥: (chosen_supplier, nal, opt)
      - –ï—Å–ª–∏ —É Sklad nal >= 1 ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Sklad –±–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π.
      - –ò–Ω–∞—á–µ –∏—â–µ–º —Å—Ä–µ–¥–∏ Invask/Okno/United –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å nal > 0 –∏ –±–µ—Ä—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π opt.
      - –ü—Ä–∏ —Ä–∞–≤–Ω—ã—Ö opt ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É SUPPLIERS.
      - –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ('', 0, None).
    """

    sklad_code = str(row.get('Sklad') or '').strip()
    sklad_enabled = global_stock_flags.get("suppliers", {}).get("Sklad", True)

    if sklad_code and sklad_enabled:
        # –û—Å—Ç–∞—Ç–æ–∫ —Å–∫–ª–∞–¥–∞ –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–∑ !YMWB.db ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–º "–ù–∞–ª" —Å—Ç—Ä–æ–∫–∏
        nal_ext, opt_ext = _fetch_stock_for(conn, 'Sklad', sklad_code)
        if nal_ext >= 1:
            return 'Sklad', nal_ext, opt_ext

    # 2) –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –∏–∑ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    best = ('', 0, None)  # (supplier, nal, opt)
    for sup in SUPPLIERS:
        sup_code = str(row.get(sup) or '').strip()
        if not sup_code:
            continue
        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        if not global_stock_flags.get("suppliers", {}).get(sup, True):
            continue
        nal, opt = _fetch_stock_for(conn, sup, sup_code)
        if nal and nal > 0 and opt is not None:
            if best[0] == '':
                best = (sup, nal, opt)
            else:
                # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ opt; –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ ‚Äî –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É SUPPLIERS
                if opt < best[2]:
                    best = (sup, nal, opt)
                elif opt == best[2]:
                    if SUPPLIERS.index(sup) < SUPPLIERS.index(best[0]):
                        best = (sup, nal, opt)

    return best

def _calc_price(opt_value, markup_raw):
    try:
        opt = float(str(opt_value).replace(' ', '').replace('—Ä.', ''))
        markup = float(str(markup_raw).replace('%', '').replace(' ', ''))
        return int(round((opt + opt * markup / 100.0) / 100.0) * 100)
    except:
        return None

global_stock_flags = load_stock_flags()

app = Flask(__name__)
DB_PATH = "System/marketplace_base.db"
load_dotenv(dotenv_path=os.path.join("System", ".env"))
app.secret_key = os.getenv('SECRET_KEY')
USERNAME = "admin"
PASSWORD = os.getenv('PASSWORD')
app.permanent_session_lifetime = timedelta(days=30)

@app.route('/favicon.ico')
def favicon():
    from flask import send_from_directory
    import os
    return send_from_directory(
        os.path.join(app.root_path, 'static'),
        'favicon.ico',
        mimetype='image/x-icon'
    )

@app.route('/toggle_stock/<market>', methods=['POST', 'GET'])
def toggle_stock(market):
    try:
        with toggle_lock:
            if market not in global_stock_flags:
                return jsonify({"status": "error", "message": "unknown market"}), 400

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (ON/OFF)
            global_stock_flags[market] = not global_stock_flags[market]
            with open(FLAGS_PATH, 'w') as f:
                json.dump(global_stock_flags, f)

            state = "ON" if global_stock_flags[market] else "OFF"
            logger.info(f"üü° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ {market}: {state}")

            conn_main = sqlite3.connect(DB_PATH, timeout=10)
            cur = conn_main.cursor()
            conn_backup = sqlite3.connect("System/temp_stock_backup.db", timeout=10)
            bcur = conn_backup.cursor()

            if not global_stock_flags[market]:
                bcur.execute(f"""
                    CREATE TABLE IF NOT EXISTS {market}_backup (
                        –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å TEXT,
                        Sklad TEXT,
                        –ù–∞–ª INTEGER,
                        PRIMARY KEY (–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, Sklad)
                    )
                """)
                bcur.execute(f"DELETE FROM {market}_backup")

                cur.execute("""
                    SELECT Sklad, –ù–∞–ª
                      FROM marketplace
                     WHERE LOWER(TRIM("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å")) = LOWER(TRIM(?))
                """, (market.lower(),))
                data = cur.fetchall()

                bcur.executemany(
                    f"INSERT INTO {market}_backup (–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, Sklad, –ù–∞–ª) VALUES (?, ?, ?)",
                    [(market, art, nal) for art, nal in data]
                )

                cur.execute("""
                    UPDATE marketplace
                       SET –ù–∞–ª = 0
                     WHERE LOWER(TRIM("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å")) = LOWER(TRIM(?))
                """, (market.lower(),))
                logger.info(f"üì¶ {market}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫, –æ—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã")
            else:
                bcur.execute(f"""
                    SELECT Sklad, –ù–∞–ª
                      FROM {market}_backup
                     WHERE LOWER(TRIM("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å")) = LOWER(TRIM(?))
                """, (market.lower(),))
                backup_data = bcur.fetchall()

                for art, nal in backup_data:
                    cur.execute("""
                        UPDATE marketplace
                           SET –ù–∞–ª = ?
                         WHERE LOWER(TRIM("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å")) = LOWER(TRIM(?))
                           AND TRIM(COALESCE(Sklad,'')) = TRIM(?)
                    """, (nal, market.lower(), art))

                bcur.execute(f"DELETE FROM {market}_backup")
                logger.info(f"üîÅ {market}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(backup_data)} —Å—Ç—Ä–æ–∫")

            conn_main.commit()
            conn_backup.commit()
            conn_main.close()
            conn_backup.close()

            try:
                recompute_marketplace_core(market)
                logger.info(f"üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è {market}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –¥–ª—è {market}: {e}")

            # ‚úÖ –í–°–ï–ì–î–ê JSON
            return jsonify({
                "status": "ok",
                "market": market,
                "enabled": global_stock_flags[market]
            }), 200
    except Exception as e:
        logger.exception("‚ùå toggle_stock failed")
        return jsonify({"status": "error", "message": str(e)}), 500



@app.route('/run_update')
def run_manual_update():
    try:
        update_sklad_task()
        logger.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return '', 204
        return redirect(request.referrer or url_for('index'))
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        return Response("–û—à–∏–±–∫–∞", status=500)


def requires_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if not session.get('logged_in'):
            return redirect(url_for('login'))
        return f(*args, **kwargs)

    return decorated


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if request.form['username'] == USERNAME and request.form['password'] == PASSWORD:
            session.permanent = True
            session['logged_in'] = True
            logger.success(f"üë§ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {USERNAME}")
            return redirect(url_for('index'))
        else:
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞")
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", 401
    return '''
        <!doctype html>
        <html>
        <head>
            <title>–í—Ö–æ–¥</title>
            <meta charset="utf-8">
            <link rel="icon" href="/static/favicon.ico" type="image/x-icon">
            <style>
                body {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    background: #f0f2f5;
                    margin: 0;
                    font-family: 'Inter', sans-serif;
                }
                .login-container {
                    background: white;
                    padding: 30px 40px;
                    border-radius: 15px;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                    width: 300px;
                    text-align: center;
                }
                .login-container h2 {
                    margin-bottom: 20px;
                    font-size: 24px;
                }
                .login-container input[type="text"],
                .login-container input[type="password"],
                .login-container input[type="submit"] {
                    width: 100%;
                    padding: 10px;
                    margin-bottom: 15px;
                    border: 1px solid #ccc;
                    border-radius: 8px;
                    font-size: 16px;
                    box-sizing: border-box;
                }
                .login-container input[type="submit"] {
                    background-color: #007bff;
                    color: white;
                    border: none;
                    cursor: pointer;
                    transition: background-color 0.3s;
                }
                .login-container input[type="submit"]:hover {
                    background-color: #0056b3;
                }
            </style>
        </head>
        <body>

        <div class="login-container">
            <h2>–í—Ö–æ–¥</h2>
            <form method="post">
                <input type="text" name="username" placeholder="–õ–æ–≥–∏–Ω" required><br>
                <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required><br>
                <input type="submit" value="–í–æ–π—Ç–∏">
            </form>
        </div>

        </body>
        </html>
        '''

@app.route('/toggle_supplier/<supplier>', methods=['POST', 'GET'])
def toggle_supplier(supplier):
    try:
        with toggle_lock:  # –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –≤ JSON
            global_stock_flags["suppliers"][supplier] = not global_stock_flags["suppliers"].get(supplier, True)
            with open(FLAGS_PATH, 'w') as f:
                json.dump(global_stock_flags, f)
            logger.info(f"üîÅ –ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier} –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {'ON' if global_stock_flags['suppliers'][supplier] else 'OFF'}")

            # –ú–∞–ø–ø–∏–º –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ -> –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –µ–≥–æ –∫–æ–¥–æ–º
            col_by_supplier = {"Invask": "Invask", "Okno": "Okno", "United": "United", "Sklad": None}
            col = col_by_supplier.get(supplier)
            if supplier not in col_by_supplier:
                return jsonify({"status": "error", "message": "unknown supplier"}), 400

            # –£—Å–ª–æ–≤–∏–µ –æ—Ç–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫
            if supplier == "Sklad":
                where_clause = """
                    COALESCE(Invask,'')='' AND COALESCE(Okno,'')='' AND COALESCE(United,'')='' 
                    AND TRIM(COALESCE(Sklad,''))<>'' AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?
                """
            else:
                where_clause = f"{col} IS NOT NULL AND TRIM({col}) <> '' AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?"

            conn_main = sqlite3.connect(DB_PATH, timeout=10)
            conn_temp = sqlite3.connect("System/temp_stock_backup.db", timeout=10)
            cursor_main = conn_main.cursor()
            cursor_temp = conn_temp.cursor()

            for market in ['yandex', 'ozon', 'wildberries']:
                table_backup = f"backup_supplier_{supplier}_{market}"
                try:
                    cursor_main.execute(f"SELECT Sklad, –ù–∞–ª FROM marketplace WHERE {where_clause}", (market,))
                    rows = cursor_main.fetchall()

                    if not global_stock_flags["suppliers"][supplier]:
                        cursor_temp.execute(f"""
                            CREATE TABLE IF NOT EXISTS {table_backup} (
                                Sklad TEXT PRIMARY KEY,
                                –ù–∞–ª INTEGER
                            )
                        """)
                        cursor_temp.execute(f"DELETE FROM {table_backup}")
                        for art, nal in rows:
                            cursor_temp.execute(
                                f"INSERT INTO {table_backup} (Sklad, –ù–∞–ª) VALUES (?, ?)",
                                (art, nal)
                            )
                        cursor_main.execute(f"UPDATE marketplace SET –ù–∞–ª = 0 WHERE {where_clause}", (market,))
                    else:
                        for art, _ in rows:
                            cursor_temp.execute(
                                f"SELECT –ù–∞–ª FROM {table_backup} WHERE Sklad = ?",
                                (art,)
                            )
                            res = cursor_temp.fetchone()
                            if res:
                                nal = res[0]
                                cursor_main.execute("""
                                    UPDATE marketplace
                                       SET –ù–∞–ª = ?
                                     WHERE Sklad = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?
                                """, (nal, art, market))
                                cursor_temp.execute(
                                    f"DELETE FROM {table_backup} WHERE Sklad = ?",
                                    (art,)
                                )
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {supplier} –≤ {market}: {e}")

            conn_main.commit()
            conn_temp.commit()
            conn_main.close()
            conn_temp.close()

            # –ü–µ—Ä–µ—Å—á—ë—Ç –ø–æ –≤—Å–µ–º –ú–ü
            for market in ['yandex', 'ozon', 'wildberries']:
                try:
                    recompute_marketplace_core(market)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –¥–ª—è {market}: {e}")

            # ‚úÖ –í–°–ï–ì–î–ê JSON
            return jsonify({
                "status": "ok",
                "supplier": supplier,
                "enabled": global_stock_flags["suppliers"][supplier]
            }), 200
    except Exception as e:
        logger.exception("‚ùå toggle_supplier failed")
        return jsonify({"status": "error", "message": str(e)}), 500



@app.route('/')
@requires_auth
def index():
    return show_table('yandex')


@app.route('/table/<table_name>')
@requires_auth
def show_table(table_name):
    logger.info(f"üìä –û—Ç–∫—Ä—ã—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
    sort_column = request.args.get("sort")
    sort_order = request.args.get("order")  # None, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç

    if not sort_column:
        # –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ú–æ–¥–µ–ª–∏
        sort_column = "–ú–æ–¥–µ–ª—å"
        sort_order = "asc"
    elif sort_column == "–ù–∞–ª" and sort_order is None:
        # üëá –¥–ª—è "–ù–∞–ª" –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ = desc
        sort_order = "desc"
    elif sort_order is None:
        sort_order = "asc"
    last_download_time = get_last_download_time()

    conn = sqlite3.connect(DB_PATH, timeout=10)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = [row[0] for row in cursor.fetchall()]


    query = "SELECT * FROM marketplace WHERE –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?"
    df = pd.read_sql_query(query, conn, params=(table_name,))
    if "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" in df.columns:
        df.drop(columns=["–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"], inplace=True)
    # –ñ–µ–ª–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ (WB ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
    if table_name == "wildberries":
        preferred = [
            'Sklad', 'Invask', 'Okno', 'United',
            'WB Barcode', 'WB –ê—Ä—Ç–∏–∫—É–ª',
            '–ú–æ–¥–µ–ª—å',
            '–°—Ç–∞—Ç—É—Å', '–ù–∞–ª', '–û–ø—Ç', '%', '–¶–µ–Ω–∞',
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
        ]
    else:
        preferred = [
            'Sklad', 'Invask', 'Okno', 'United',
            '–ú–æ–¥–µ–ª—å',
            '–°—Ç–∞—Ç—É—Å', '–ù–∞–ª', '–û–ø—Ç', '%', '–¶–µ–Ω–∞',
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
        ]

    preferred = [c for c in preferred if c in df.columns]
    others = [c for c in df.columns if c not in preferred]
    df = df[preferred + others]
    search_term = request.args.get('search', '').strip().lower()
    if search_term:
        df = df[df.apply(lambda row: any(
            search_term in str(row.get(col, '')).lower()
            for col in ['Sklad', 'Invask', 'Okno', 'United', '–ú–æ–¥–µ–ª—å']
        ), axis=1)]
    letter_filter = request.args.get('letter', '').strip().lower()
    if letter_filter:
        if letter_filter == '0-9':
            df = df[df['–ú–æ–¥–µ–ª—å'].str.match(r'^\d', na=False)]
        elif letter_filter == '–∞-—è':
            df = df[df['–ú–æ–¥–µ–ª—å'].str.match(r'^[–∞-—è–ê-–Ø]', na=False)]
        else:
            df = df[df['–ú–æ–¥–µ–ª—å'].str.lower().str.startswith(letter_filter)]
    if '_id' in df.columns:
        df.drop(columns=['_id'], inplace=True)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" –≤ datetime –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" in df.columns:
        try:
            df["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] = pd.to_datetime(df["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"], format="%d.%m.%Y %H:%M", errors="coerce")
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç: {e}")
    if all(col in df.columns for col in ['–û–ø—Ç', '%', '–¶–µ–Ω–∞', '–ù–∞–ª']):
        def recalc_price(opt, markup):
            try:
                opt = float(str(opt).replace(' ', '').replace('—Ä.', ''))
                markup = float(str(markup).replace('%', '').replace(' ', ''))
                return int(round((opt + (opt * markup / 100)) / 100.0) * 100)
            except:
                return None  # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å

        mask = pd.to_numeric(df['–ù–∞–ª'], errors='coerce').fillna(0) > 0
        df.loc[mask, '–¶–µ–Ω–∞'] = df.loc[mask].apply(
            lambda row: recalc_price(row['–û–ø—Ç'], row['%']), axis=1
        ).fillna(df.loc[mask, '–¶–µ–Ω–∞'])
    conn.close()

    if sort_column and sort_column in df.columns:
        # üëá –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫ "–≤—ã–∫–ª—é—á–µ–Ω"
        df['_disabled_flag'] = df['–°—Ç–∞—Ç—É—Å'].astype(str).str.lower().eq('–≤—ã–∫–ª.').astype(int)

        # üëá –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        if sort_column in ["Sklad", "Invask", "Okno", "United"]:
            def highlight_sort(row):
                active_supplier = choose_best_supplier_for_row(row.to_dict(), None, use_row_sklad=True)[0]
                return 1 if active_supplier == sort_column else 0

            df['_highlight_sort'] = df.apply(highlight_sort, axis=1)
            # üîë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (asc) —Ü–≤–µ—Ç–Ω—ã–µ —Å–≤–µ—Ä—Ö—É
            df = df.sort_values(
                by=['_disabled_flag', '_highlight_sort'],
                ascending=[True, False if sort_order == "asc" else True]
            )
            df.drop(columns=['_highlight_sort'], inplace=True)

        # üëá –û–±—ã—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        elif sort_column == "–ú–æ–¥–µ–ª—å":
            df = df.sort_values(
                by=['_disabled_flag', sort_column],
                key=lambda x: x.str.lower() if x.name == sort_column else x,
                ascending=[True, sort_order == "asc"]
            )
        else:
            df = df.sort_values(
                by=['_disabled_flag', sort_column],
                ascending=[True, sort_order == "asc"]
            )

        # —É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥
        df.drop(columns=['_disabled_flag'], inplace=True)

    df.insert(0, "‚Ññ", range(1, len(df) + 1))
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è Yandex –∏ Ozon
    if table_name != "wildberries":
        for col in ["WB Barcode", "WB –ê—Ä—Ç–∏–∫—É–ª"]:
            if col in df.columns:
                df.drop(columns=[col], inplace=True)
    # –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º –ù–∞–ª = 0
    if not global_stock_flags.get(table_name, True):
        if '–ù–∞–ª' in df.columns:
            df['–ù–∞–ª'] = 0
    # üëá –ú–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_rows = len(df)
    in_stock = df[df['–ù–∞–ª'].astype(str).str.replace(r'\D', '', regex=True).astype(float) > 0].shape[0]
    disabled = df[df['–°—Ç–∞—Ç—É—Å'].astype(str).str.lower() == '–≤—ã–∫–ª.'].shape[0]

    price_col = '–¶–µ–Ω–∞'

    def safe_avg(col):
        try:
            return round(
                pd.to_numeric(df[col].astype(str).str.replace(r'\D', '', regex=True), errors='coerce').dropna().mean())
        except:
            return 0

    avg_price = safe_avg(price_col)
    avg_markup = safe_avg('%')

    stats = {
        '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤': total_rows,
        '–í –Ω–∞–ª–∏—á–∏–∏': in_stock,
        '–û—Ç–∫–ª—é—á–µ–Ω–æ': disabled,
        f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {price_col.split()[-1]}': f'{avg_price:,} —Ä.'.replace(',', ' '),
        '–°—Ä–µ–¥–Ω—è—è –Ω–∞—Ü–µ–Ω–∫–∞': f'{avg_markup} %'
    }

    # üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç df)
    # üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    conn_sup = sqlite3.connect(DB_PATH)
    try:
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        suppliers_list = ["Invask", "Okno", "United", "Sklad"]

        # –ü–æ–¥—Å—á—ë—Ç—ã: "total" ‚Äî —Å—Ç—Ä–æ–∫ —Å –Ω–µ–ø—É—Å—Ç—ã–º –∫–æ–¥–æ–º —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞;
        # "active" ‚Äî —Ç–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –ù–∞–ª > 0.
        conn_cnt = sqlite3.connect(DB_PATH)
        cnt_df = pd.read_sql_query("""
            SELECT LOWER(–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å) AS mp,
                   SUM(CASE WHEN TRIM(COALESCE(Invask,''))<>'' THEN 1 ELSE 0 END) AS invask_total,
                   SUM(CASE WHEN TRIM(COALESCE(Invask,''))<>'' AND –ù–∞–ª>0 THEN 1 ELSE 0 END) AS invask_active,

                   SUM(CASE WHEN TRIM(COALESCE(Okno,''))<>'' THEN 1 ELSE 0 END) AS okno_total,
                   SUM(CASE WHEN TRIM(COALESCE(Okno,''))<>'' AND –ù–∞–ª>0 THEN 1 ELSE 0 END) AS okno_active,

                   SUM(CASE WHEN TRIM(COALESCE(United,''))<>'' THEN 1 ELSE 0 END) AS united_total,
                   SUM(CASE WHEN TRIM(COALESCE(United,''))<>'' AND –ù–∞–ª>0 THEN 1 ELSE 0 END) AS united_active,

                   SUM(CASE WHEN TRIM(COALESCE(Sklad,''))<>'' THEN 1 ELSE 0 END) AS sklad_total,
                   SUM(CASE WHEN TRIM(COALESCE(Sklad,''))<>'' AND –ù–∞–ª>0 THEN 1 ELSE 0 END) AS sklad_active
              FROM marketplace
             GROUP BY LOWER(–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å)
        """, conn_cnt)
        conn_cnt.close()

        supplier_counts = {}
        for _, r in cnt_df.iterrows():
            mp = r['mp']
            supplier_counts.setdefault('Invask', {})[mp] = {'total': int(r['invask_total'] or 0),
                                                            'active': int(r['invask_active'] or 0)}
            supplier_counts.setdefault('Okno', {})[mp] = {'total': int(r['okno_total'] or 0),
                                                          'active': int(r['okno_active'] or 0)}
            supplier_counts.setdefault('United', {})[mp] = {'total': int(r['united_total'] or 0),
                                                            'active': int(r['united_active'] or 0)}
            supplier_counts.setdefault('Sklad', {})[mp] = {
                'total': int(r['sklad_total'] or 0),
                'active': int(r['sklad_active'] or 0)
            }

    except Exception:
        suppliers_list = []
    conn_sup.close()

    saved_form_data = session.pop('saved_form', {})
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥ (–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º)
    if "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" in df.columns:
        df["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] = df["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"].dt.strftime("%d.%m.%Y %H:%M")
    has_errors = has_error_products()

    print("üî• has_errors =", has_errors)
    logger.debug(f"üî• has_errors = {has_errors}")
    # === –í–°–¢–ê–í–ò–¢–¨ –ü–ï–†–ï–î return render_template(...) ===
    # –í–°–¢–ê–í–ò–¢–¨ –ü–ï–†–ï–î return render_template(...)
    active_suppliers = []

    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è; –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏
    need_cols = ['Sklad', 'Invask', 'Okno', 'United', '%', '–¶–µ–Ω–∞', '–û–ø—Ç', '–ù–∞–ª', '–°—Ç–∞—Ç—É—Å', '–ú–æ–¥–µ–ª—å']
    df_for_pick = df.copy()
    for c in need_cols:
        if c not in df_for_pick.columns:
            df_for_pick[c] = ''

    for _, r in df_for_pick[need_cols].fillna('').iterrows():
        row_dict = dict(r)

        # –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
        if str(row_dict.get('–°—Ç–∞—Ç—É—Å', '')).strip().lower() == '–≤—ã–∫–ª.':
            active_suppliers.append('')
            continue

        chosen_sup, _, _ = choose_best_supplier_for_row(row_dict, None, use_row_sklad=True)

        active_suppliers.append(chosen_sup or '')
    return render_template(
        "index.html",
        tables=tables,
        table_data=df,
        selected_table=table_name,
        sort_column=sort_column,
        sort_order=sort_order,
        zip=zip,
        stats=stats,
        last_download_time=last_download_time,
        global_stock_flags=global_stock_flags,
        saved_form_data=saved_form_data,
        suppliers_list=suppliers_list,
        supplier_counts=supplier_counts,
        active_suppliers=active_suppliers,
        has_errors=has_errors

    )


@app.route('/delete/<table>/<item_id>', methods=['POST'])
def delete_row(table, item_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ Sklad –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
    cursor.execute("SELECT –ú–æ–¥–µ–ª—å, Sklad FROM marketplace WHERE Sklad = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?", (item_id, table))
    result = cursor.fetchone()
    model, art_mc = result if result else ("", "")

    cursor.execute("DELETE FROM marketplace WHERE Sklad = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?", (item_id, table))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    send_telegram_message(f"üóë –£–¥–∞–ª—ë–Ω –∏–∑ {table.upper()}:\n{model} / {art_mc}")
    logger.warning(f"üóë –£–¥–∞–ª—ë–Ω —Ç–æ–≤–∞—Ä –∏–∑ {table.upper()}: {model} / {art_mc}")

    return redirect(url_for('show_table', table_name=table, search=''))


@app.route('/update/<table>/<item_id>', methods=['POST'])
def update_row(table, item_id):
    data = request.form.to_dict()
    if "Sklad" in data:
        del data["Sklad"]

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM marketplace WHERE Sklad = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?", (item_id, table))
    row = cursor.fetchone()
    column_names = [description[0] for description in cursor.description]
    old_data = dict(zip(column_names, row)) if row else {}

    if not old_data:
        conn.close()
        logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å Sklad = {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return '', 400

    if not global_stock_flags.get(table, True):
        logger.info(f"‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ: {table}")
        if '–ù–∞–ª' in data:
            del data['–ù–∞–ª']

    model = old_data.get("–ú–æ–¥–µ–ª—å", "‚Äî")
    opt_old = int(old_data.get("–û–ø—Ç", 0))
    stock_old = int(old_data.get("–ù–∞–ª", 0))
    price_old = 0

    price_old = int(old_data.get("–¶–µ–Ω–∞", 0) or 0)

    try:
        stock_new = int(data.get("–ù–∞–ª", 0))
        opt_new = int(data.get("–û–ø—Ç", 0))
        markup = float(data.get("%", "0").replace('%', '').replace(' ', ''))
        price_new = round((opt_new + opt_new * markup / 100) / 100.0) * 100
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∏—Å–µ–ª: {e}")
        stock_new, opt_new, price_new = stock_old, opt_old, price_old

    if (stock_old != stock_new) or (opt_old != opt_new) or (price_old != price_new):
        logger.debug(
            f"‚úÖ {table} | {item_id} ({model}) ‚Üí "
            f"stock: {stock_old} ‚Üí {stock_new}, "
            f"opt: {opt_old} ‚Üí {opt_new}, "
            f"price: {price_old} ‚Üí {price_new}"
        )
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ "–ù–∞–ª", –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–≤—ã–∫–ª."
    if data.get('–°—Ç–∞—Ç—É—Å', '').strip() == '–≤—ã–∫–ª.':
        data['–ù–∞–ª'] = '0'
    elif not global_stock_flags.get(table, True):
        if '–ù–∞–ª' in data:
            del data['–ù–∞–ª']

    # –£–¥–∞–ª–∏—Ç—å Sklad –∏–∑ –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    try:
        opt = float(data.get('–û–ø—Ç', '0').replace(' ', '').replace('—Ä.', ''))
        markup = float(data.get('%', '0').replace(' ', '').replace('%', ''))
        raw_price = opt + (opt * markup / 100)
        price = int(round(raw_price / 100.0) * 100)
        formatted_price = str(price)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        conn_check = sqlite3.connect(DB_PATH)
        cur_check = conn_check.cursor()
        cur_check.execute("PRAGMA table_info(marketplace)")
        table_columns = [col[1] for col in cur_check.fetchall()]
        conn_check.close()

        data['–¶–µ–Ω–∞'] = formatted_price  # –í –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–ª–æ–Ω–∫–∞ '–¶–µ–Ω–∞' –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å

        if '%' in data:
            data['%'] = str(int(markup))

    except ValueError:
        logger.warning("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –û–ø—Ç/–ù–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã.")

    # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    important_fields = [
        "Invask", "Okno", "United", "–ú–æ–¥–µ–ª—å", "–°—Ç–∞—Ç—É—Å", "–ù–∞–ª", "–û–ø—Ç", "%", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "–¶–µ–Ω–∞", "WB –ê—Ä—Ç–∏–∫—É–ª", "WB Barcode"
    ]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
    changed = False
    for field in important_fields:
        old_val = str(old_data.get(field, "")).strip()
        new_val = str(data.get(field, "")).strip()
        if field == "–ù–∞–ª" and old_data.get("–°—Ç–∞—Ç—É—Å", "").strip() == "–≤—ã–∫–ª." and old_val == "0" and new_val != old_val:
            # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ª–∏—á–∏—è –≤ –ù–∞–ª, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤—ã–∫–ª—é—á–µ–Ω –∏ –ù–∞–ª=0 ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            new_val = "0"
        if old_val != new_val:
            changed = True
            break

    if changed:
        data["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] = datetime.now().strftime("%d.%m.%Y %H:%M")

    columns = list(data.keys())
    values = list(data.values())
    update_clause = ", ".join([f'"{col}" = ?' for col in columns])

    logger.debug(f"üß© SQL –∑–∞–ø—Ä–æ—Å: UPDATE '{table}' SET {update_clause} WHERE \"Sklad\" = ?")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute(
            f"UPDATE marketplace SET {update_clause} WHERE Sklad = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?",
            values + [item_id, table]
        )
        conn.commit()
        logger.debug(f"üßæ –ö–æ–ª-–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {cursor.rowcount}")
        logger.success("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞
        cursor.execute("""
            SELECT –°—Ç–∞—Ç—É—Å, –ú–æ–¥–µ–ª—å
              FROM marketplace
             WHERE Sklad = ? AND LOWER(–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å) = LOWER(?)
        """, (item_id, table))
        row = cursor.fetchone()
        if row:
            new_status, model = row
            old_status = old_data.get("–°—Ç–∞—Ç—É—Å", "").strip().lower()
            new_status = (new_status or "").strip().lower()
            if old_status != new_status:
                action = "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù" if new_status == "–≤—ã–∫–ª." else "üü¢ –í–ö–õ–Æ–ß–ï–ù"
                logger.info(f"{action}: {model} ({item_id}) –≤ —Ç–∞–±–ª–∏—Ü–µ {table.upper()}")

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:")
    finally:
        conn.close()

    return '', 204


@app.route('/bulk_markup/<market>', methods=['POST'])
def bulk_markup(market):
    """
    –ú–∞—Å—Å–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.
    delta = +1 –∏–ª–∏ -1 (–≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ x-www-form-urlencoded: delta=1|-1)
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç '–¶–µ–Ω–∞' –ø–æ —Ñ–æ—Ä–º—É–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∫ —Å–æ—Ç–Ω–µ.
    """
    try:
        delta = int(request.form.get('delta', '0'))
    except Exception:
        return Response("Bad delta", status=400)

    if market not in ('yandex', 'ozon', 'wildberries'):
        return Response("Bad market", status=400)

    # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≥–ª–æ–±–∞–ª—å–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Ü–µ–Ω–∫—É –∏ —Ü–µ–Ω—É, –æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    from datetime import datetime
    now_str = datetime.now().strftime("%d.%m.%Y %H:%M")

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()

    # –ù–∞—Ü–µ–Ω–∫–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –±–µ–∑ –∑–Ω–∞–∫–∞ %, –û–ø—Ç –∏ –¶–µ–Ω–∞ ‚Äî —á–∏—Å–ª–∞/—Å—Ç—Ä–æ–∫–∏-—á–∏—Å–ª–∞.
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Ü–µ–Ω–∫—É –∏ —Å—Ä–∞–∑—É —Ü–µ–Ω—É —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –∫ —Å–æ—Ç–Ω–µ.
    try:
        cur.execute("""
            UPDATE marketplace
               SET "%" = COALESCE(CAST("%" AS INTEGER), 0) + ?,
                   –¶–µ–Ω–∞ = CAST(
                              ROUND(
                                  (CAST(–û–ø—Ç AS FLOAT) + CAST(–û–ø—Ç AS FLOAT) * (COALESCE(CAST("%" AS INTEGER),0) + ?)/100.0)
                                  / 100.0, 0
                              ) * 100 AS INTEGER
                          ),
                   "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
             WHERE –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?
        """, (delta, delta, now_str, market))
        conn.commit()
        updated = cur.rowcount
    except Exception as e:
        conn.rollback()
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏")
        return Response("Server error", status=500)
    finally:
        conn.close()

    logger.success(f"üìà –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ {market}: delta={delta}, –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {updated}")
    return '', 204


@app.route('/download_log')
def download_log():
    today_str = datetime.now().strftime("%Y-%m-%d")
    log_file_path = LOG_DIR / "app.log"

    if not log_file_path.exists():
        logger.warning("üìÅ –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return "–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

    return send_file(log_file_path, as_attachment=True)


@app.route('/add/<table_name>', methods=['POST'])
def add_item(table_name):
    from datetime import datetime
    data = request.form.to_dict()

    if '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' in data and data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] is None:
        data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = data.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') or ''

    if not global_stock_flags.get(table_name, True):
        # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å OFF ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ù–∞–ª = 0
        data['–ù–∞–ª'] = '0'
        logger.info(f"‚ûñ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å {table_name}: –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ 0")

    art_mc = data.get('Sklad', '').strip()
    invask = (data.get('Invask', '') or '').strip()
    okno = (data.get('Okno', '') or '').strip()
    united = (data.get('United', '') or '').strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not art_mc or not data.get('–ú–æ–¥–µ–ª—å') or not data.get('–ù–∞–ª') or not data.get('–û–ø—Ç') or not data.get('%'):
        logger.warning("‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (Sklad, –ú–æ–¥–µ–ª—å, –ù–∞–ª, –û–ø—Ç, %).")
        return redirect(url_for('show_table', table_name=table_name))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Wildberries
    if table_name == "wildberries":
        if not data.get('WB Barcode') or not data.get('WB –ê—Ä—Ç–∏–∫—É–ª'):
            logger.warning("‚ùå –î–ª—è Wildberries –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã WB Barcode –∏ WB –ê—Ä—Ç–∏–∫—É–ª.")
            return redirect(url_for('show_table', table_name=table_name))

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    model = data.get('–ú–æ–¥–µ–ª—å', '').strip()
    wb_barcode = data.get('WB Barcode', '').strip()
    wb_artikul = data.get('WB –ê—Ä—Ç–∏–∫—É–ª', '').strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è
    conditions = []
    params = [table_name]

    if art_mc:
        conditions.append("Sklad = ?")
        params.append(art_mc)
    if model:
        conditions.append("–ú–æ–¥–µ–ª—å = ?")
        params.append(model)
    if wb_barcode:
        conditions.append("\"WB Barcode\" = ?")
        params.append(wb_barcode)
    if wb_artikul:
        conditions.append("\"WB –ê—Ä—Ç–∏–∫—É–ª\" = ?")
        params.append(wb_artikul)

    existing_count = 0
    if conditions:
        query = f"""
            SELECT COUNT(*) FROM marketplace
            WHERE –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?
              AND ({' OR '.join(conditions)})
        """
        cursor.execute(query, params)
        existing_count = cursor.fetchone()[0]

    if existing_count > 0:
        conn.close()
        logger.warning("‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º Sklad, –ú–æ–¥–µ–ª—å, WB Barcode –∏–ª–∏ WB –ê—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        session['saved_form'] = data
        return redirect(url_for('show_table', table_name=table_name, duplicate='1'))

    try:
        opt = float(data.get('–û–ø—Ç', '').replace(' ', '').replace('—Ä.', ''))
        markup = float(data.get('%', '').replace('%', '').replace(' ', ''))
        stock = int(data.get('–ù–∞–ª', '').replace(' ', ''))
        if data.get('–°—Ç–∞—Ç—É—Å', '').strip() == '–≤—ã–∫–ª.':
            stock = 0

        data['–ù–∞–ª'] = str(stock)
        price_ym = int(round((opt + (opt * markup / 100)) / 100.0) * 100)

        data['–û–ø—Ç'] = str(opt)
        data['%'] = str(int(markup))
        data['–ù–∞–ª'] = str(stock)

        data['–¶–µ–Ω–∞'] = str(price_ym)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        data["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] = datetime.now().strftime("%d.%m.%Y %H:%M")

        data["–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"] = table_name  # –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤

        columns = list(data.keys())
        values = [data[col] for col in columns]
        placeholders = ", ".join(["?"] * len(columns))
        escaped_columns = [f'"{col}"' for col in columns]
        insert_query = f"INSERT INTO marketplace ({', '.join(escaped_columns)}) VALUES ({placeholders})"

        cursor.execute(insert_query, values)
        conn.commit()
        send_telegram_message(f"‚úÖ –í {table_name.upper()} –¥–æ–±–∞–≤–ª–µ–Ω:\n{data.get('–ú–æ–¥–µ–ª—å', '')} / {art_mc}")
        logger.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä –≤ {table_name.upper()}: {data.get('–ú–æ–¥–µ–ª—å', '')} / {art_mc}, –ø–æ—Å—Ç–∞–≤—â–∏–∫: {data.get('–ü–æ—Å—Ç–∞–≤—â–∏–∫', '')}")


    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
    finally:
        conn.close()

    return redirect(url_for('show_table', table_name=table_name, added='1'))



@app.route('/statistic')
@requires_auth
def show_statistic():
    logger.info("üìà –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query(
        "SELECT Sklad, Invask, Okno, United, –ú–æ–¥–µ–ª—å, –°—Ç–∞—Ç—É—Å, –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, –û–ø—Ç, –ù–∞–ª FROM marketplace",
        conn
    )
    conn.close()

    data = {}
    supplier_stats = {
        "Sklad": {"Yandex": 0, "Ozon": 0, "Wildberries": 0, "–í—Å–µ–≥–æ": 0, "–ê–∫—Ç–∏–≤–Ω–æ": 0, "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ": 0},
        "Invask": {"Yandex": 0, "Ozon": 0, "Wildberries": 0, "–í—Å–µ–≥–æ": 0, "–ê–∫—Ç–∏–≤–Ω–æ": 0, "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ": 0},
        "Okno": {"Yandex": 0, "Ozon": 0, "Wildberries": 0, "–í—Å–µ–≥–æ": 0, "–ê–∫—Ç–∏–≤–Ω–æ": 0, "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ": 0},
        "United": {"Yandex": 0, "Ozon": 0, "Wildberries": 0, "–í—Å–µ–≥–æ": 0, "–ê–∫—Ç–∏–≤–Ω–æ": 0, "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ": 0},
    }

    for _, row in df.iterrows():
        art_mc = row['Sklad']
        status = (row.get('–°—Ç–∞—Ç—É—Å') or '').strip().lower()
        mp = row.get('–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '').capitalize()

        if art_mc not in data:
            data[art_mc] = {
                'Sklad': art_mc,
                '–ú–æ–¥–µ–ª—å': row.get('–ú–æ–¥–µ–ª—å', '')
            }

        # –æ—Ç–º–µ—á–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
        data[art_mc][mp] = True
        if status == '–≤—ã–∫–ª.':
            data[art_mc][f'–°—Ç–∞—Ç—É—Å_{mp}'] = '–≤—ã–∫–ª.'

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
        for sup in ["Sklad", "Invask", "Okno", "United"]:
            if sup == "Sklad":
                cond = (not row['Invask'] and not row['Okno'] and not row['United'] and row['Sklad'])
            else:
                cond = bool(row[sup])

            if cond:
                supplier_stats[sup][mp] += 1
                supplier_stats[sup]['–í—Å–µ–≥–æ'] += 1
                if status == '–≤—ã–∫–ª.':
                    supplier_stats[sup]['–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'] += 1
                else:
                    supplier_stats[sup]['–ê–∫—Ç–∏–≤–Ω–æ'] += 1

    errors = detect_errors_across_marketplaces()

    return render_template(
        "statistic.html",
        stats_data=list(data.values()),
        supplier_stats=supplier_stats,
        errors=errors
    )





def has_error_products():
    errors = detect_errors_across_marketplaces()
    return len(errors) > 0

def detect_errors_across_marketplaces():
    import sqlite3
    import pandas as pd

    db_path = "System/marketplace_base.db"
    conn = sqlite3.connect(db_path, timeout=10)
    df = pd.read_sql_query("SELECT * FROM marketplace", conn)
    conn.close()

    df["–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"] = df["–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"].str.capitalize()

    errors = []
    # üëá —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ Sklad –∫–∞–∫ –ø–æ–ª–µ
    fields_to_check = ["Sklad", "Invask", "Okno", "United", "–ú–æ–¥–µ–ª—å", "–°—Ç–∞—Ç—É—Å"]

    for art_mc, group in df.groupby("Sklad"):
        if len(group) <= 1:
            continue

        values_by_field = {field: set(group[field].astype(str).fillna("")) for field in fields_to_check}

        has_diff = any(len(values) > 1 for values in values_by_field.values())
        if not has_diff:
            continue

        for _, row in group.iterrows():
            row_dict = row.to_dict()
            diff = {field: len(values_by_field[field]) > 1 for field in fields_to_check}
            diff["–ù–∞–ª"] = False
            diff["–û–ø—Ç"] = False

            errors.append({
                "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å": row_dict.get("–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", ""),
                "Sklad": row_dict.get("Sklad", ""),
                "Invask": row_dict.get("Invask", ""),
                "Okno": row_dict.get("Okno", ""),
                "United": row_dict.get("United", ""),
                "–ú–æ–¥–µ–ª—å": row_dict.get("–ú–æ–¥–µ–ª—å", ""),
                "–°—Ç–∞—Ç—É—Å": row_dict.get("–°—Ç–∞—Ç—É—Å", ""),
                "–ù–∞–ª": row_dict.get("–ù–∞–ª", ""),
                "–û–ø—Ç": row_dict.get("–û–ø—Ç", ""),
                "diff": diff
            })

    return errors


@app.errorhandler(Exception)
def handle_error(e):
    logger.exception(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", 500

@app.route('/download_unlisted')
@requires_auth
def download_unlisted():
    try:
        df = generate_unlisted()
        if df.empty:
            return Response("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", status=404)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel –≤ –ø–∞–º—è—Ç–∏
        output = BytesIO()
        df.to_excel(output, index=False)
        output.seek(0)

        return send_file(
            output,
            as_attachment=True,
            download_name="new_products.xlsx",
            mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        return Response("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", status=500)

def recompute_marketplace_core(market: str) -> int:
    # –µ—Å–ª–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≤—ã–∫–ª—é—á–µ–Ω - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    if not global_stock_flags.get(market, True):
        logger.info(f"‚è≠ {market.upper()} –≤—ã–∫–ª—é—á–µ–Ω ‚Üí –ø–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ–ø—É—â–µ–Ω, –Ω—É–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º")
        return
    """–ß–∏—Å—Ç—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –±–µ–∑ Flask-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫."""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()

    rows = cur.execute("""
        SELECT rowid, Sklad, Invask, Okno, United,
               "%", –¶–µ–Ω–∞, –û–ø—Ç, –ù–∞–ª, –°—Ç–∞—Ç—É—Å, –ú–æ–¥–µ–ª—å
          FROM marketplace
         WHERE –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?
    """, (market,)).fetchall()

    updated = 0
    for r in rows:
        row = dict(r)
        chosen_sup, nal, opt = choose_best_supplier_for_row(row, conn, use_row_sklad=True)
        logger.debug(
            f"üîé {market.upper()} | {row.get('–ú–æ–¥–µ–ª—å', '‚Äî')} | Sklad={row.get('Sklad', '')}, "
            f"Invask={row.get('Invask', '')}, Okno={row.get('Okno', '')}, United={row.get('United', '')} "
            f"‚Üí chosen={chosen_sup} nal={nal} opt={opt}"
        )

        if chosen_sup == '':
            new_nal = 0
            new_opt = row.get('–û–ø—Ç')
        else:
            new_nal = int(nal or 0)
            new_opt = opt if opt is not None else row.get('–û–ø—Ç')

        try:
            markup = float(str(row.get('%', '0')).replace('%', '').replace(' ', ''))
        except:
            markup = 0.0

            # –í—ã–∫–ª—é—á–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤—Å–µ–≥–¥–∞ —Å –ù–∞–ª = 0
        if str(row.get('–°—Ç–∞—Ç—É—Å', '')).strip().lower() == '–≤—ã–∫–ª.':
            new_nal = 0

            # üö´ –ó–∞–º–æ—Ä–æ–∑–∫–∞: –ø—Ä–∏ –ù–∞–ª=0 –ù–ï —Ç—Ä–æ–≥–∞–µ–º –û–ø—Ç/–¶–µ–Ω–∞
        freeze_price = int(new_nal or 0) == 0

        new_price = None
        if not freeze_price and (new_opt is not None):
            try:
                base_opt = float(str(new_opt).replace(' ', '').replace('—Ä.', ''))
                new_price = int(round((base_opt + (base_opt * markup / 100.0)) / 100.0) * 100)
            except Exception:
                new_price = None

        changed = False
        sets, vals = [], []

        if int(row.get('–ù–∞–ª') or 0) != int(new_nal):
            sets.append('–ù–∞–ª = ?'); vals.append(int(new_nal)); changed = True

        try:
            cur_opt = float(str(row.get('–û–ø—Ç') or '0').replace(' ', '').replace('—Ä.', ''))
        except:
            cur_opt = None
        if (not freeze_price) and (new_opt is not None):
            try:
                new_opt_f = float(new_opt)
            except:
                new_opt_f = cur_opt
            if cur_opt is None or (new_opt_f is not None and new_opt_f != cur_opt):
                sets.append('–û–ø—Ç = ?');
                vals.append(new_opt_f);
                changed = True

        try:
            cur_price = int(str(row.get('–¶–µ–Ω–∞') or '0').replace(' ', '').replace('—Ä.', ''))
        except:
            cur_price = 0
        if new_price is not None and new_price != cur_price:
            sets.append('–¶–µ–Ω–∞ = ?')
            vals.append(int(new_price))
            changed = True

        if changed:
            sets.append('"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?'); vals.append(datetime.now().strftime("%d.%m.%Y %H:%M"))
            vals.append(r['rowid'])
            cur.execute(f"UPDATE marketplace SET {', '.join(sets)} WHERE rowid = ?", vals)
            updated += 1

    conn.commit()
    conn.close()

    logger.success(f"üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫ –≤ {market.upper()}: {updated}")
    return updated

@app.route('/recompute/<market>', methods=['POST', 'GET'])
@requires_auth
def recompute_marketplace(market):
    updated = recompute_marketplace_core(market)
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return '', 204
    return redirect(url_for('show_table', table_name=market))


if __name__ == '__main__':
    if not os.environ.get("WERKZEUG_RUN_MAIN"):  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
        scheduler = BackgroundScheduler()
        scheduler.add_job(update_sklad_task, 'interval', minutes=5)
        scheduler.add_job(remove_all_products_from_all_actions, 'interval', minutes=1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ê–∫—Ü–∏–π –û–∑–æ–Ω
        scheduler.add_job(backup_database, 'cron', hour=2)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2 –Ω–æ—á–∏
        scheduler.add_job(disable_invask_if_needed, 'cron', day_of_week='fri', hour=1, minute=0)
        scheduler.add_job(enable_invask_if_needed, 'cron', day_of_week='sun', hour=15, minute=0)
        scheduler.add_job(disable_okno_if_needed, 'cron', day_of_week='fri', hour=1, minute=0)
        scheduler.add_job(enable_okno_if_needed, 'cron', day_of_week='sun', hour=15, minute=0)
        scheduler.start()
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    app.run(host="127.0.0.1", port=5050, debug=False, use_reloader=False)

