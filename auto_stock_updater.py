"""
–ú–æ–¥—É–ª—å `auto_stock_updater` –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö (ozon, wildberries, yandex)
–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (!YMWB.db ‚Üí —Ç–∞–±–ª–∏—Ü–∞ prices).

–û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏:
- –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∏ –û–ü–¢ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prices.
- –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ marketplace_base.db.
- –û–±–Ω—É–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —É –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Ç–µ—Ö, —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ.
- –õ–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–æ–º–æ—â—å—é loguru.
"""

import sqlite3
from loguru import logger
import json
import os

def update(flags):
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
    source_conn = sqlite3.connect('System/!YMWB.db', timeout=10)
    target_conn = sqlite3.connect('System/marketplace_base.db', timeout=10)
    logger.debug("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    source_cursor = source_conn.cursor()
    source_cursor.execute("""
        SELECT "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢" FROM prices
    """)
    source_data = source_cursor.fetchall()
    logger.debug(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (prices)")

    source_dict = {
        (supplier.strip(), article.strip()): (stock, opt)
        for supplier, article, stock, opt in source_data
    }

    target_tables = ["ozon", "wildberries", "yandex"]

    for table in target_tables:
        if not flags.get(table, True):
            logger.info(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {table} ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ñ–ª–∞–≥–∞—Ö")
            continue

        target_cursor = target_conn.cursor()
        target_cursor.execute(f"""
            SELECT rowid, "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–°—Ç–∞—Ç—É—Å" FROM "{table}"
        """)
        rows = target_cursor.fetchall()
        logger.debug(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ {table}: {len(rows)} —Å—Ç—Ä–æ–∫")

        for rowid, supplier, article, status in rows:
            supplier = supplier.strip()
            article = article.strip()
            status = status.strip().lower()
            key = (supplier, article)

            if status == "–≤—ã–∫–ª.":
                logger.debug(f"üîï {table} | {supplier} | {article} –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî stock = 0")
                logger.debug(f"üîï –û—Ç–∫–ª—é—á–µ–Ω —Ç–æ–≤–∞—Ä {supplier} | {article} ‚Üí stock=0")
                target_cursor.execute(f"""
                    UPDATE "{table}" SET "–ù–∞–ª" = ? WHERE rowid = ?
                """, (0, rowid))
            elif key in source_dict:
                stock, opt = source_dict[key]
                logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {table} | {supplier} | {article} ‚Üí stock={stock}, opt={opt}")
                target_cursor.execute(f"""
                    UPDATE "{table}" SET "–ù–∞–ª" = ?, "–û–ø—Ç" = ? WHERE rowid = ?
                """, (stock, opt, rowid))
            else:
                if supplier != "Sklad":
                    logger.debug(f"‚ùì {table} | {supplier} | {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ ‚Äî stock = 0")
                    target_cursor.execute(f"""
                        UPDATE "{table}" SET "–ù–∞–ª" = 0 WHERE rowid = ?
                    """, (rowid,))

        target_conn.commit()
        logger.info(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    source_conn.close()
    target_conn.close()
    logger.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
