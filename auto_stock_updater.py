"""
–ú–æ–¥—É–ª—å `auto_stock_updater` –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö (ozon, wildberries, yandex)
–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (!YMWB.db ‚Üí —Ç–∞–±–ª–∏—Ü–∞ prices).

–û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏:
- –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∏ –û–ü–¢ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prices.
- –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ marketplace_base.db.
- –û–±–Ω—É–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —É –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Ç–µ—Ö, —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ.
- –õ–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–æ–º–æ—â—å—é loguru.
"""

import sqlite3
from logger_config import logger
from datetime import datetime
import json
import os

def update(flags):
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
    source_conn = sqlite3.connect('System/!YMWB.db', timeout=10)
    target_conn = sqlite3.connect('System/marketplace_base.db', timeout=10)
    logger.debug("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏ –û–ü–¢ –∏–∑ YMWB
    source_cursor = source_conn.cursor()
    source_cursor.execute("""SELECT "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢" FROM prices""")
    source_data = source_cursor.fetchall()
    logger.debug(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (prices)")

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ª–æ–≤–∞—Ä—é (–ø–æ—Å—Ç–∞–≤—â–∏–∫, –∞—Ä—Ç–∏–∫—É–ª) ‚Üí (–Ω–∞–ª–∏—á–∏–µ, –æ–ø—Ç)
    source_dict = {}
    for supplier, article, stock, opt in source_data:
        try:
            supplier = str(supplier).strip()
            article = str(article).strip()
            stock = int(str(stock).strip())
            opt = int(str(opt).strip())
            if supplier != "Sklad" and stock < 3:
                stock = 0  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 3
            source_dict[(supplier, article)] = (stock, opt)
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ prices: {e}")

    cursor = target_conn.cursor()
    cursor.execute("""
        SELECT rowid, –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å,
               Sklad, Invask, Okno, United,
               –°—Ç–∞—Ç—É—Å, –ú–æ–¥–µ–ª—å, –ù–∞–ª, –û–ø—Ç, "%"
        FROM marketplace
    """)
    all_rows = cursor.fetchall()

    updated = 0

    for row in all_rows:
        (rowid, mp,
         code_sklad, code_invask, code_okno, code_united,
         status, model, old_stock, old_opt, markup) = row

        mp = (mp or "").strip().lower()
        status = (status or "").strip().lower()
        model = model or "‚Äî"

        if not flags.get(mp, True):
            continue

        # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ===
        if status == "–≤—ã–∫–ª.":
            if str(old_stock).strip() != "0":
                logger.debug(f"‚õî {mp} | {model} ‚Äî —Å—Ç–∞—Ç—É—Å '–≤—ã–∫–ª.' ‚Üí –ù–∞–ª = 0")
                cursor.execute("""
                    UPDATE marketplace
                       SET –ù–∞–ª = 0, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
                     WHERE rowid = ?
                """, (datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))
            continue

        # --- 1) –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Sklad ---
        chosen_supplier = ""
        chosen_stock = 0
        chosen_opt = None

        def get_from_source(supplier_name, code_value):
            if not code_value:
                return 0, None
            key = (supplier_name, str(code_value).strip())
            return source_dict.get(key, (0, None))

        # Sklad –±–µ–∑ –ø–æ—Ä–æ–≥–∞: –µ—Å–ª–∏ –ù–∞–ª ‚â• 1 ‚Äî –±–µ—Ä—ë–º –±–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
        if code_sklad:
            stock_sklad, opt_sklad = get_from_source("Sklad", code_sklad)
            if stock_sklad >= 1:
                chosen_supplier = "Sklad"
                chosen_stock = int(stock_sklad)
                chosen_opt = opt_sklad

        # --- 2) –ò–Ω–∞—á–µ ‚Äî –ª—É—á—à–∏–π –∏–∑ Invask/Okno/United –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –û–ü–¢ –ø—Ä–∏ –ù–∞–ª > 0 ---
        if not chosen_supplier:
            candidates = []
            for sup_name, sup_code in (("Invask", code_invask),
                                       ("Okno", code_okno),
                                       ("United", code_united)):
                stock_val, opt_val = get_from_source(sup_name, sup_code)
                if (stock_val or 0) > 0 and (opt_val is not None):
                    candidates.append((sup_name, int(stock_val), float(opt_val)))

            if candidates:
                # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –û–ü–¢; –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Invask > Okno > United
                order = {"Invask": 0, "Okno": 1, "United": 2}
                candidates.sort(key=lambda x: (x[2], order.get(x[0], 9)))
                chosen_supplier, chosen_stock, chosen_opt = candidates[0]

        # --- 3) –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –æ–±–Ω—É–ª—è–µ–º –ù–∞–ª, —Ü–µ–Ω—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ---
        if not chosen_supplier:
            new_stock = 0
            new_opt = old_opt
        else:
            new_stock = chosen_stock
            new_opt = chosen_opt if chosen_opt is not None else old_opt

        # –ü–µ—Ä–µ—Å—á—ë—Ç —Ü–µ–Ω—ã (–∫–∞–∫ —É —Ç–µ–±—è): –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Å–æ—Ç–µ–Ω
        try:
            markup = float(str(markup).replace('%', '').replace(' ', '')) if markup else 0.0
        except:
            markup = 0.0
        try:
            base_opt = float(str(new_opt).replace(' ', '').replace('—Ä.', '')) if new_opt is not None else 0.0
        except:
            base_opt = 0.0
        new_price = round((base_opt + base_opt * markup / 100.0) / 100.0) * 100

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫ —á–∏—Å–ª–∞–º
        try:
            old_stock = int(old_stock)
        except:
            old_stock = 0
        try:
            old_opt = int(old_opt)
        except:
            old_opt = 0

        cursor.execute("SELECT –¶–µ–Ω–∞ FROM marketplace WHERE rowid = ?", (rowid,))
        row_price = cursor.fetchone()
        old_price = int(row_price[0]) if row_price and str(row_price[0]).isdigit() else 0

        if (old_stock != new_stock) or (old_opt != int(base_opt)) or (old_price != int(new_price)):
            logger.debug(
                f"‚úÖ {mp} | {model} ‚Üí "
                f"stock: {old_stock} ‚Üí {new_stock}, "
                f"opt: {old_opt} ‚Üí {int(base_opt)}, "
                f"price: {old_price} ‚Üí {int(new_price)}"
            )
            cursor.execute("""
                UPDATE marketplace
                   SET –ù–∞–ª = ?, –û–ø—Ç = ?, –¶–µ–Ω–∞ = ?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
                 WHERE rowid = ?
            """, (new_stock, int(base_opt), int(new_price), datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))
            updated += 1

    # === –û–±–Ω—É–ª—è–µ–º –ù–∞–ª —É —Ç–µ—Ö —Å—Ç—Ä–æ–∫, –≥–¥–µ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ –¥–∞—ë—Ç –Ω–∞–ª–∏—á–∏—è >0 ===
    logger.info("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    cursor.execute("""
        SELECT rowid, –°—Ç–∞—Ç—É—Å, –ú–æ–¥–µ–ª—å, –ù–∞–ª, Sklad, Invask, Okno, United
        FROM marketplace
    """)
    for rowid, status, model, nal, code_sklad, code_invask, code_okno, code_united in cursor.fetchall():
        if (status or "").strip().lower() == "–≤—ã–∫–ª.":
            continue
        # –µ—Å—Ç—å –ª–∏ –∫—Ç–æ-—Ç–æ —Å –ù–∞–ª–∏—á–∏–µ–º > 0?
        has_any = False
        if code_sklad:
            st, _ = source_dict.get(("Sklad", str(code_sklad).strip()), (0, None))
            if st >= 1:
                has_any = True
        if not has_any:
            for sup, code in (("Invask", code_invask), ("Okno", code_okno), ("United", code_united)):
                if not code: continue
                st, _ = source_dict.get((sup, str(code).strip()), (0, None))
                if (st or 0) > 0:
                    has_any = True
                    break
        if not has_any and str(nal).strip() != "0":
            logger.debug(f"‚ùå –û–±–Ω—É–ª—è–µ–º: {model} ‚Äî –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ—Ç –Ω–∞–ª–∏—á–∏—è")
            cursor.execute("""
                UPDATE marketplace
                   SET –ù–∞–ª = 0, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
                 WHERE rowid = ?
            """, (datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))

    target_conn.commit()
    source_conn.close()
    target_conn.close()
    logger.success(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò–∑–º–µ–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫: {updated}")
