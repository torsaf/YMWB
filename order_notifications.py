"""
–ú–æ–¥—É–ª—å order_notifications –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
Yandex.Market, Wildberries –∏ Ozon, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏—Ö –≤ Telegram –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
–≤—ã—á–∏—Ç–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞.

–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è:

- get_orders_yandex_market:
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Yandex.Market —á–µ—Ä–µ–∑ API.

- get_orders_wildberries:
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å Wildberries –ø–æ API v3.

- get_orders_ozon:
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Ozon —á–µ—Ä–µ–∑ API v3.

- write_order_id_to_file:
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç ID –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ.

- update_stock:
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–º–µ–Ω—å—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Google Sheets (–¥–ª—è Sklad).

- notify_about_new_orders:
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram. –¢–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç –≤—ã—á–∏—Ç–∞–Ω–∏–µ —Å–æ —Å–∫–ª–∞–¥–∞.

- check_for_new_orders:
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –Ω–∏–º.
"""

import os
import sqlite3
import requests
import pandas as pd
import gspread

from datetime import datetime, timedelta
from dotenv import load_dotenv
from logger_config import logger
from notifiers import get_notifier

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv(dotenv_path=os.path.join("System", ".env"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
telegram_got_token = os.getenv('telegram_got_token')
telegram_chat_id = os.getenv('telegram_chat_id')
telegram = get_notifier('telegram')


def update_stock(articul, platform):
    logger.info(f"üîÅ –í—ã—á–∏—Ç–∞–Ω–∏–µ —Å–æ —Å–∫–ª–∞–¥–∞: {articul} | –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
    db_path = "System/marketplace_base.db"
    conn = sqlite3.connect(db_path, timeout=10)
    articul = str(articul).strip()

    platform_table_map = {
        'Yandex': 'yandex',
        'Ozon': 'ozon',
        'Wildberries': 'wildberries'
    }

    table = platform_table_map.get(platform)
    if not table:
        return

    df = pd.read_sql_query(f"SELECT * FROM '{table}' WHERE –ê—Ä—Ç_MC = ?", conn, params=(articul,))
    if df.empty:
        conn.close()
        return

    def format_price(value):
        try:
            return f"{int(value):,}".replace(",", " ") + " —Ä."
        except (ValueError, TypeError):
            return "‚Äî"
    row = df.iloc[0]
    model = row.get("–ú–æ–¥–µ–ª—å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    stock = int(row.get("–ù–∞–ª", 0))
    supplier = row.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫", "N/A")
    opt_price = format_price(row.get("–û–ø—Ç"))
    artikul_alt = row.get("–ê—Ä—Ç–∏–∫—É–ª", "")

    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    price_field_map = {
        'yandex': '–¶–µ–Ω–∞ YM',
        'ozon': '–¶–µ–Ω–∞ OZ',
        'wildberries': '–¶–µ–Ω–∞ WB'
    }
    rrc_field = price_field_map.get(table)
    rrc_price = format_price(row.get(rrc_field))


    if supplier.lower() == 'sklad':
        gc = gspread.service_account(filename='System/my-python-397519-3688db4697d6.json')
        sh = gc.open("–ö–ê–ó–ù–ê")
        worksheet = sh.worksheet("–°–ö–õ–ê–î")
        data = worksheet.get_all_values()
        sklad = pd.DataFrame(data[1:], columns=data[0])

        sklad['–ù–∞–ª–∏—á–∏–µ'] = pd.to_numeric(sklad['–ù–∞–ª–∏—á–∏–µ'], errors='coerce').fillna(0).astype(int)
        sklad['–ê—Ä—Ç –º–æ–π'] = sklad['–ê—Ä—Ç –º–æ–π'].apply(lambda x: str(int(x)) if str(x).isdigit() else '')

        matched_rows = sklad[sklad['–ê—Ä—Ç –º–æ–π'] == articul]
        if matched_rows.empty:
            return

        row_index = matched_rows.index[0]
        prev_q = sklad.at[row_index, '–ù–∞–ª–∏—á–∏–µ']
        sklad.at[row_index, '–ù–∞–ª–∏—á–∏–µ'] = max(0, prev_q - 1)
        new_q = sklad.at[row_index, '–ù–∞–ª–∏—á–∏–µ']

        updated_data = sklad.iloc[:, :8].replace([float('inf'), float('-inf')], 0).fillna(0).values.tolist()
        worksheet.update(values=updated_data, range_name='A2:H')

        message = (
            f"‚úÖ –ë–æ—Ç –≤—ã—á–µ–ª —Å–æ —Å–∫–ª–∞–¥–∞\n\n"
            f"–¢–æ–≤–∞—Ä: \"{model}\"\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: *{articul}*\n"
            f"–û–ø—Ç: {opt_price}, –†–†–¶: {rrc_price}\n"
            f"–ë—ã–ª–æ: {prev_q}, —Å—Ç–∞–ª–æ: {new_q}.\n"
            f"–°–∫–ª–∞–¥: {supplier}"
        )
    else:
        new_stock = max(0, stock - 1)
        cur = conn.cursor()
        cur.execute(f"UPDATE '{table}' SET –ù–∞–ª = ? WHERE –ê—Ä—Ç_MC = ?", (new_stock, articul))
        conn.commit()
        logger.success(f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω: {articul} | {stock} ‚Üí {new_stock}")
        # üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã !YMWB.db
        try:
            alt_db_path = "System/!YMWB.db"
            alt_conn = sqlite3.connect(alt_db_path, timeout=10)
            alt_cur = alt_conn.cursor()

            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å —ç—Ç–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
            alt_df = pd.read_sql_query("SELECT rowid, * FROM prices WHERE –ê—Ä—Ç–∏–∫—É–ª = ?", alt_conn, params=(artikul_alt,))
            if not alt_df.empty:
                for _, alt_row in alt_df.iterrows():
                    rowid = alt_row["rowid"]
                    current_qty = int(alt_row.get("–ù–∞–ª–∏—á–∏–µ", 0))
                    updated_qty = max(0, current_qty - 1)

                    alt_cur.execute(
                        "UPDATE prices SET –ù–∞–ª–∏—á–∏–µ = ? WHERE rowid = ?",
                        (updated_qty, rowid)
                    )
                    logger.debug(f"üîß YMWB: {artikul_alt} | {current_qty} ‚Üí {updated_qty}")

                alt_conn.commit()
            else:
                logger.warning(f"‚ùó –ê—Ä—Ç–∏–∫—É–ª {artikul_alt} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ !YMWB.db")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ !YMWB.db: {e}")

        finally:
            alt_conn.close()

        message = (
            f"‚úÖ –ë–æ—Ç –≤—ã—á–µ–ª —Å–æ —Å–∫–ª–∞–¥–∞\n\n"
            f"–¢–æ–≤–∞—Ä: \"{model}\"\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: *{articul}*\n"
            f"–û–ø—Ç: {opt_price}, –†–†–¶: {rrc_price}\n"
            f"–ë—ã–ª–æ: {stock}, —Å—Ç–∞–ª–æ: {new_stock}.\n"
            f"–°–∫–ª–∞–¥: {supplier}"
        )

    conn.close()
    telegram.notify(token=telegram_got_token, chat_id=telegram_chat_id, message=message, parse_mode='markdown')


def get_orders_yandex_market():
    logger.info("üì• –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å Yandex.Market...")
    campaign_id = os.getenv('campaign_id')
    ym_token = os.getenv('ym_token')
    url_ym = f'https://api.partner.market.yandex.ru/campaigns/{campaign_id}/orders'
    headers = {"Authorization": f"Bearer {ym_token}"}
    params = {
        "fake": "false",
        "status": "PROCESSING",
        "substatus": "STARTED"
    }
    response = requests.get(url_ym, headers=headers, params=params, timeout=10)
    if response.status_code == 200:
        orders_data = response.json().get('orders', [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        logger.success(f"‚úÖ –ó–∞–∫–∞–∑—ã –æ—Ç Yandex –ø–æ–ª—É—á–µ–Ω—ã: {len(orders_data)} —à—Ç.")
        orders_data = response.json().get('orders', [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –∫–ª—é—á–∞ 'orders'
        return orders_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    else:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–æ–≤ —Å Yandex: {response.status_code} ‚Äî {response.text}")
        return []


def get_orders_wildberries():
    logger.info("üì• –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å Wildberries...")
    wb_api_token = os.getenv('wb_token')
    url = 'https://marketplace-api.wildberries.ru/api/v3/orders/new'
    headers = {'Authorization': wb_api_token}
    response = requests.get(url, headers=headers, timeout=10)
    if response.status_code == 200:
        orders = response.json().get('orders', [])
        logger.success(f"‚úÖ –ó–∞–∫–∞–∑—ã –æ—Ç WB –ø–æ–ª—É—á–µ–Ω—ã: {len(orders)} —à—Ç.")
        orders = response.json().get('orders', [])
        return orders
    else:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–æ–≤ —Å Wildberries: {response.status_code} ‚Äî {response.text}")
        return []

def get_orders_ozon():
    url = "https://api-seller.ozon.ru/v3/posting/fbs/unfulfilled/list"
    headers = {
        'Client-Id': os.getenv('ozon_client_ID'),
        'Api-Key': os.getenv('ozon_API_key'),
        'Content-Type': 'application/json'
    }

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
    cutoff_from = (datetime.utcnow() - timedelta(days=365)).isoformat() + "Z"  # –ì–æ–¥ –Ω–∞–∑–∞–¥
    cutoff_to = (datetime.utcnow() + timedelta(days=20)).isoformat() + "Z"

    payload = {
        "dir": "ASC",  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        "filter": {
            "cutoff_from": cutoff_from,  # –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
            "cutoff_to": cutoff_to,  # –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
            "status": "awaiting_packaging",  # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ (–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
            "delivery_method_id": [],  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            "provider_id": [],  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            "warehouse_id": []  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        },
        "limit": 100,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        "offset": 0,  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        "with": {
            "analytics_data": True,  # –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            "barcodes": True,  # –í–∫–ª—é—á–∏—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
            "financial_data": True,  # –í–∫–ª—é—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            "translit": True  # –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
        }
    }
    response = requests.post(url, headers=headers, json=payload, timeout=10)
    if response.status_code == 200:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã —Å –Ω—É–∂–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º 'awaiting_packaging'
        orders = response.json().get("result", {}).get("postings", [])
        filtered_orders = [order for order in orders if order.get("status") == "awaiting_packaging"]
        return filtered_orders
    else:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å Ozon: {response.status_code} ‚Äî {response.text}")
        return []


def write_order_id_to_file(order_id, filename):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(filename):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ ID –∑–∞–∫–∞–∑–∞
        with open(filename, 'w') as file:
            file.write(str(order_id) + '\n')
        return True
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á–∏—Ç–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(filename, 'r') as file:
            existing_ids = set(file.read().splitlines())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π ID –≤ —Ñ–∞–π–ª–µ
        if str(order_id) not in existing_ids:
            logger.debug(f"‚úèÔ∏è –ó–∞–ø–∏—Å–∞–Ω –Ω–æ–≤—ã–π ID –∑–∞–∫–∞–∑–∞: {order_id} ‚Üí {filename}")
            # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª
            with open(filename, 'a') as file:
                file.write(str(order_id) + '\n')
            return True
        else:
            # –ï—Å–ª–∏ ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            return False


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å ID –∑–∞–∫–∞–∑–æ–≤
file_path = 'System/order_ids.txt'


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±–µ—Ä–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∑–∞–∫–∞–∑ —Å WB
def get_product(nmId):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã wildberries –ø–æ WB –ê—Ä—Ç–∏–∫—É–ª—É."""
    db_path = 'System/marketplace_base.db'
    try:
        conn = sqlite3.connect(db_path, timeout=10)
        cursor = conn.cursor()
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é "WB –ê—Ä—Ç–∏–∫—É–ª"
        cursor.execute("SELECT –ú–æ–¥–µ–ª—å FROM wildberries WHERE [WB –ê—Ä—Ç–∏–∫—É–ª] = ?", (str(nmId),))
        result = cursor.fetchone()
        if result:
            return result[0]  # –ú–æ–¥–µ–ª—å
        else:
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        conn.close()


def notify_about_new_orders(orders, platform, supplier):
    if not orders:
        pass
        # message = f"–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {platform} –æ—Ç {supplier} –Ω–µ—Ç."
        # telegram.notify(token=telegram_got_token, chat_id=telegram_chat_id, message=message)
    else:
        for order in orders:
            # –ó–∞–ø–∏—Å—å ID –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            order_id = order.get('posting_number') if supplier == 'Ozon' else order.get('id')
            # –ó–∞–ø–∏—Å—å ID –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if write_order_id_to_file(order_id, file_path):
                logger.info(f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {order_id} ({platform})")
                message = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ *{platform}*:\n\n"
                message += f"ID –∑–∞–∫–∞–∑–∞: {order_id}\n"
                if supplier == 'Yandex':
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏
                    shipment_date = next(
                        (shipment.get('shipmentDate') for shipment in order.get('delivery', {}).get('shipments', [])),
                        '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    )
                    message += f"–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {shipment_date}\n"
                    for item in order.get('items', []):
                        # –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
                        offer_id = item.get('offerId', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        # –ò–º—è —Ç–æ–≤–∞—Ä–∞
                        offer_name = item.get('offerName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
                        subsidy_amount = next(
                            (subsidy.get('amount') for subsidy in item.get('subsidies', []) if
                             subsidy.get('type') == 'SUBSIDY'), 0
                        )
                        price = int(item.get('buyerPrice', 0))
                        total_price = int(subsidy_amount + price)
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                        message += f"–ê—Ä—Ç–∏–∫—É–ª: {offer_id}\n"
                        message += f"–¢–æ–≤–∞—Ä: {offer_name}\n"
                        message_minus_odin = offer_id
                        message += f"–¶–µ–Ω–∞: {total_price} —Ä.\n"
                elif supplier == 'Wildberries':
                    message += f"–ê—Ä—Ç–∏–∫—É–ª: {order.get('article')} \n"
                    message += f"–¢–æ–≤–∞—Ä: {get_product(order.get('nmId'))} \n"
                    message += f"–¶–µ–Ω–∞: {str(order.get('convertedPrice'))[:-2]} —Ä.\n"
                    message_minus_odin = order.get('article')
                elif supplier == 'Ozon':  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Ozon
                    shipment_date_raw = order.get('shipment_date')  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ ISO 8601 –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
                    if shipment_date_raw:
                        shipment_date = datetime.strptime(shipment_date_raw, "%Y-%m-%dT%H:%M:%SZ").strftime("%d.%m.%Y")
                        message += f"–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {shipment_date}\n"
                    else:
                        shipment_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                        message += f"–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {shipment_date}\n"

                    for product in order.get('products', []):
                        message += f"–ê—Ä—Ç–∏–∫—É–ª: {product['offer_id']}\n"
                        message += f"–¢–æ–≤–∞—Ä: {product['name']}\n"  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                        # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ".0000"
                        price = int(float(product['price']))
                        message += f"–¶–µ–Ω–∞: {price} —Ä.\n"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
                        message_minus_odin = product.get('offer_id')

                message += '\n'
                telegram.notify(token=telegram_got_token, chat_id=telegram_chat_id, message=message,
                                parse_mode='markdown')
                # –ó–∞—Ç–µ–º –≤—ã—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞
                if message_minus_odin:  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
                    logger.debug(f"üîß –í—ã–∑—ã–≤–∞–µ–º update_stock –¥–ª—è {message_minus_odin} | –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
                    update_stock(message_minus_odin, platform)
                message1 = 'üì¶'
                telegram.notify(token=telegram_got_token, chat_id=telegram_chat_id, message=message1)


def check_for_new_orders():
    logger.info("üö¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
    orders_yandex_market = get_orders_yandex_market()
    notify_about_new_orders(orders_yandex_market, "Yandex", "Yandex")

    orders_wildberries = get_orders_wildberries()
    notify_about_new_orders(orders_wildberries, "Wildberries", "Wildberries")

    orders_ozon = get_orders_ozon()  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å Ozon
    notify_about_new_orders(orders_ozon, "Ozon", "Ozon")  # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö —Å Ozon


# check_for_new_orders()
