"""
–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è:
- gen_sklad: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
- wb_update: –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ Wildberries.
- ym_update: –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ Yandex.Market.

"""

import requests
import os
from dotenv import load_dotenv
from datetime import datetime, timezone
from notifiers import get_notifier
import pandas as pd
import gspread

load_dotenv()

telegram_got_token = os.getenv('telegram_got_token')
telegram_chat_id = os.getenv('telegram_chat_id')
telegram = get_notifier('telegram')


def gen_sklad():
    gc = gspread.service_account(filename='my-python-397519-3688db4697d6.json')
    sh = gc.open("–ö–ê–ó–ù–ê")
    worksheet_name = "–°–ö–õ–ê–î"
    worksheet = sh.worksheet(worksheet_name)
    data = worksheet.get('A1:Q')
    data = [row for row in data if any(cell.strip() for cell in row)]
    data = [[cell.strip() for cell in row] for row in data]
    filtered_data = [row for row in data[1:] if 'SKL' in row]
    columns = data[0]
    data = filtered_data
    sklad = pd.DataFrame(data, columns=columns)
    desired_columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–°—Ç–∞—Ç—É—Å', '–ú–æ–¥–µ–ª—å', '–ù–∞–ª–∏—á–∏–µ', 'WB']
    sklad = sklad.loc[:, desired_columns]
    sklad_filtered = sklad[sklad['–°—Ç–∞—Ç—É—Å'] == '–ù–∞ —Å–∫–ª–∞–¥–µ']
    ym_frame = sklad_filtered[sklad_filtered['–ù–∞–ª–∏—á–∏–µ'].notna()][['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–ª–∏—á–∏–µ']].dropna(subset=['–ù–∞–ª–∏—á–∏–µ'])
    wb_frame = sklad_filtered[sklad_filtered['WB'].notna()][['WB', '–ù–∞–ª–∏—á–∏–µ']].dropna(subset=['–ù–∞–ª–∏—á–∏–µ'])
    wb_final = []
    if not wb_frame.empty:
        for index, row in wb_frame.iterrows():
            sku = row['WB']
            amount = row['–ù–∞–ª–∏—á–∏–µ']
            wb_final.append({"sku": sku, "amount": int(amount)})

    ym_final = []
    current_time = datetime.now(timezone.utc).isoformat()
    if not ym_frame.empty:
        for index, row in ym_frame.iterrows():
            sku = str(row['–ê—Ä—Ç–∏–∫—É–ª'])
            count = int(row['–ù–∞–ª–∏—á–∏–µ'])
            item = {
                "sku": sku,
                "items": [{"count": count, "updatedAt": current_time}]
            }
            ym_final.append(item)
    return wb_final, ym_final


def wb_update(wb_data):
    wb_api_token = os.getenv('wb_token')
    warehouse_id = int(os.getenv('warehouseId'))
    url_wb = f'https://suppliers-api.wildberries.ru/api/v3/stocks/{warehouse_id}'
    headers = {
        'Authorization': wb_api_token,
        'stocks': 'application/json'
    }
    params = {'warehouseId': warehouse_id, 'stocks': wb_data}
    response = requests.put(url_wb, headers=headers, json=params)
    if response.status_code != 204:
        message = f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞ WB. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}"
        telegram.notify(token=telegram_got_token, chat_id=telegram_chat_id, message=message)


def ym_update(ym_data):
    ym_token = os.getenv('ym_token')
    campaign_id = os.getenv('campaign_id')
    url_ym = f'https://api.partner.market.yandex.ru/campaigns/{campaign_id}/offers/stocks'
    headers = {"Authorization": f"Bearer {ym_token}"}
    stock_data = {"skus": ym_data}
    response = requests.put(url_ym, headers=headers, json=stock_data)
    if response.status_code != 200:
        message = f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞ YM. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}"
        telegram.notify(token=telegram_got_token, chat_id=telegram_chat_id, message=message)
