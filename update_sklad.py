"""
–ú–æ–¥—É–ª—å `update_sklad` –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–∂–¥—É Google Sheets –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

- gen_sklad():
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–°–ö–õ–ê–î" Google Sheets, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É "SKL" –∏ —Å—Ç–∞—Ç—É—Å—É "–ù–∞ —Å–∫–ª–∞–¥–µ",
    –æ—á–∏—â–∞–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: "–ê—Ä—Ç –º–æ–π", "–ú–æ–¥–µ–ª—å", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢".

- update_sklad_db(sklad_df):
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ ("ozon", "wildberries", "yandex") –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫–ª–∞–¥–∞.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ `System/stock_flags.json`.
    –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º "Sklad":
        - –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–≤—ã–∫–ª.": —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ 0.
        - –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–∫–ª–∞–¥–µ: –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –∏ –æ–ø—Ç–æ–≤—É—é —Ü–µ–Ω—É.
        - –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ 0.

–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ `loguru` –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è, –≤–∫–ª—é—á–∞—è:
        - –ù–∞—á–∞–ª–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π.
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –æ–ø—Ç–æ–≤—ã—Ö —Ü–µ–Ω.
        - –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ç–æ–≤–∞—Ä—ã.
        - –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–ª–∞–≥–æ–≤ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
"""


from logger_config import logger
from datetime import datetime
import pandas as pd
import gspread
import sqlite3
import json



def gen_sklad():
    logger.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å–∫–ª–∞–¥–∞ (Google Sheets)")
    pd.set_option('display.max_columns', None)
    pd.set_option('display.expand_frame_repr', False)
    gc = gspread.service_account(filename='System/my-python-397519-3688db4697d6.json')
    sh = gc.open("–ö–ê–ó–ù–ê")
    worksheet = sh.worksheet("–°–ö–õ–ê–î")
    data = worksheet.get('A:W')
    logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(data) - 1} —Å—Ç—Ä–æ–∫ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)")

    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    data = [row for row in data if any(cell.strip() for cell in row)]
    data = [[cell.strip() for cell in row] for row in data]

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –°—Ç–∞—Ç—É—Å = –ù–∞ —Å–∫–ª–∞–¥–µ
    filtered_data = [
        row for row in data[1:]
        if len(row) >= 2 and row[0] == "–ù–∞ —Å–∫–ª–∞–¥–µ"
    ]
    logger.debug(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫ '–ù–∞ —Å–∫–ª–∞–¥–µ': {len(filtered_data)}")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    columns = data[0]
    sklad = pd.DataFrame(filtered_data, columns=columns)
    sklad = sklad[["–ê—Ä—Ç –º–æ–π", "–ú–æ–¥–µ–ª—å", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢"]]

    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    sklad["–ù–∞–ª–∏—á–∏–µ"] = sklad["–ù–∞–ª–∏—á–∏–µ"].replace(r"[^\d]", "", regex=True).astype(int)
    sklad["–û–ü–¢"] = sklad["–û–ü–¢"].replace(r"[^\d]", "", regex=True).astype(int)

    logger.success("üì¶ –°–∫–ª–∞–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
    return sklad


def update_sklad_db(sklad_df):
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ —Å–∫–ª–∞–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    try:
        with open("System/stock_flags.json", "r", encoding="utf-8") as f:
            flags = json.load(f)
            logger.debug(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–ª–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {flags}")
    except:
        flags = {"yandex": True, "ozon": True, "wildberries": True}

    conn = sqlite3.connect("System/marketplace_base.db", timeout=10)
    cursor = conn.cursor()

    sklad_dict = {
        str(row["–ê—Ä—Ç –º–æ–π"]): (int(row["–ù–∞–ª–∏—á–∏–µ"]), int(row["–û–ü–¢"]))
        for _, row in sklad_df.iterrows()
    }
    logger.debug(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(sklad_dict)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Å–∫–ª–∞–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    target_tables = ["ozon", "wildberries", "yandex"]

    for table in target_tables:
        if not flags.get(table, True):
            logger.info(f"‚õî –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            continue

        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table}")
        cursor.execute(f"""
            SELECT rowid, "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç_MC", "–°—Ç–∞—Ç—É—Å", "–ú–æ–¥–µ–ª—å" FROM "{table}"
        """)
        rows = cursor.fetchall()

        for rowid, supplier, art_mc, status, model in rows:
            supplier = supplier.strip()
            art_mc_str = str(art_mc).strip()
            status = (status or "").strip().lower()
            model = model.strip() if model else "‚Äî"

            if supplier != "Sklad":
                continue

            price_column = {
                "yandex": "–¶–µ–Ω–∞ YM",
                "ozon": "–¶–µ–Ω–∞ OZ",
                "wildberries": "–¶–µ–Ω–∞ WB"
            }.get(table, "–¶–µ–Ω–∞ YM")

            if art_mc_str in sklad_dict:
                nal, opt = sklad_dict[art_mc_str]

                cursor.execute(f"""
                    SELECT "–ù–∞–ª", "–û–ø—Ç", "{price_column}", "–ù–∞—Ü–µ–Ω–∫–∞" FROM "{table}" WHERE rowid = ?
                """, (rowid,))
                row_data = cursor.fetchone()
                if not row_data:
                    continue

                current_nal = int(row_data[0]) if row_data[0] is not None else 0
                current_opt = int(row_data[1]) if row_data[1] is not None else 0
                current_price = int(row_data[2]) if row_data[2] is not None else 0
                markup_raw = str(row_data[3]).replace('%', '').replace(' ', '') if row_data[3] else '0'

                try:
                    markup = float(markup_raw)
                except:
                    markup = 0.0

                try:
                    new_price = round((opt + opt * markup / 100) / 100.0) * 100
                except:
                    new_price = opt

                # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω, —Ç–µ–∫—É—â–∏–π –ù–∞–ª = 0, –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                if status == "–≤—ã–∫–ª." and current_nal == 0 and nal >= 0:
                    if (current_opt == opt) and (current_price == new_price):
                        logger.debug(
                            f"‚è© {table} | {art_mc_str} ({model}) ‚Äî –≤—ã–∫–ª—é—á–µ–Ω, –ù–∞–ª=0, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                        continue

                if (current_nal != nal) or (current_opt != opt) or (current_price != new_price):
                    logger.debug(
                        f"‚úÖ {table} | {art_mc_str} ({model}) ‚Üí "
                        f"stock: {current_nal} ‚Üí {nal}, "
                        f"opt: {current_opt} ‚Üí {opt}, "
                        f"price: {current_price} ‚Üí {new_price}"
                    )
                    cursor.execute(f"""
                        UPDATE "{table}"
                        SET "–ù–∞–ª" = ?, "–û–ø—Ç" = ?, "{price_column}" = ?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
                        WHERE rowid = ?
                    """, (nal, opt, new_price, datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))
            else:
                # –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ ‚Äî –æ–±–Ω—É–ª—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                cursor.execute(f"""SELECT "–ù–∞–ª" FROM "{table}" WHERE rowid = ?""", (rowid,))
                current = cursor.fetchone()
                current_nal = int(current[0]) if current and current[0] is not None else 0

                if current_nal != 0:
                    if status == "–≤—ã–∫–ª." and current_nal == 0:
                        logger.debug(f"‚è© {table} | {art_mc_str} ({model}) ‚Äî –≤—ã–∫–ª—é—á–µ–Ω –∏ —É–∂–µ –æ–±–Ω—É–ª—ë–Ω ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                        continue
                    logger.debug(f"‚ùå {table} | {art_mc_str} ({model}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ ‚Üí stock: {current_nal} ‚Üí 0")
                    cursor.execute(f"""
                        UPDATE "{table}"
                        SET "–ù–∞–ª" = ?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
                        WHERE rowid = ?
                    """, (0, datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))

        conn.commit()

    conn.close()
    logger.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

