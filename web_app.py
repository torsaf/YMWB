from flask import Flask, render_template, request, redirect, url_for
from apscheduler.schedulers.background import BackgroundScheduler
from update_sklad import gen_sklad, update_sklad_db
from auto_stock_updater import update
from datetime import datetime
import pandas as pd
from flask import session, Response
from functools import wraps
from dotenv import load_dotenv
import os
import requests
from loguru import logger
from pathlib import Path
from datetime import timedelta
import json
import sqlite3
import shutil
import glob

last_download_time = None
LAST_UPDATE_FILE = "System/last_update.txt"
FLAGS_PATH = "System/stock_flags.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (True = –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏, False = –≤—Å—ë –æ–±–Ω—É–ª—è–µ—Ç—Å—è)
global_stock_flags = {
    "yandex": True,
    "ozon": True,
    "wildberries": True
}

# üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
LOG_DIR = Path("System/logs")
LOG_DIR.mkdir(parents=True, exist_ok=True)

logger.remove()
logger.add(
    LOG_DIR / "app_{time:YYYY-MM-DD}.log",
    rotation="5 MB",
    retention="7 days",
    compression="zip",
    encoding="utf-8",
    enqueue=True,
    backtrace=True,
    diagnose=True,
    level="DEBUG"
)


def backup_database():
    os.makedirs("System/backups", exist_ok=True)
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    backup_filename = f"System/backups/marketplace_base_{timestamp}.db"

    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É
    shutil.copy("System/marketplace_base.db", backup_filename)
    logger.info(f"üíæ –ë—ç–∫–∞–ø –±–∞–∑—ã —Å–æ–∑–¥–∞–Ω: {backup_filename}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
    backup_files = sorted(
        glob.glob("System/backups/marketplace_base_*.db"),
        key=os.path.getmtime,
        reverse=True
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14
    for old_file in backup_files[14:]:
        try:
            os.remove(old_file)
            logger.info(f"üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_file}")
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {old_file}: {e}")

def get_last_download_time():
    if os.path.exists(LAST_UPDATE_FILE):
        with open(LAST_UPDATE_FILE, "r") as f:
            return f.read().strip()
    return None


def update_sklad_task():
    try:
        logger.success("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ update_sklad.py...")
        df = gen_sklad()
        print(df)
        update_sklad_db(df)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        with open(LAST_UPDATE_FILE, "w") as f:
            f.write(datetime.now().strftime("%d.%m.%Y - %H:%M"))
        logger.success("‚úÖ –°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        global last_download_time
        last_download_time = datetime.now().strftime("%d.%m.%Y - %H:%M")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞")


def load_stock_flags():
    try:
        with open(FLAGS_PATH, 'r') as f:
            return json.load(f)
    except Exception:
        return {"yandex": True, "ozon": True, "wildberries": True}


global_stock_flags = load_stock_flags()

app = Flask(__name__)
DB_PATH = "System/marketplace_base.db"
load_dotenv(dotenv_path=os.path.join("System", ".env"))
app.secret_key = os.getenv('SECRET_KEY')
USERNAME = "admin"
PASSWORD = os.getenv('PASSWORD')
app.permanent_session_lifetime = timedelta(days=30)


@app.route('/toggle_stock/<market>', methods=['POST'])
def toggle_stock(market):
    if market not in global_stock_flags:
        return '', 400

    global_stock_flags[market] = not global_stock_flags[market]
    with open(FLAGS_PATH, 'w') as f:
        json.dump(global_stock_flags, f)

    logger.info(f"üü° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ {market}: {'ON' if global_stock_flags[market] else 'OFF'}")

    db_path = "System/marketplace_base.db"
    backup_path = "System/temp_stock_backup.db"

    conn = sqlite3.connect(DB_PATH, timeout=10)
    backup_conn = sqlite3.connect(backup_path, timeout=10)
    cur = conn.cursor()
    bcur = backup_conn.cursor()

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ë–î, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    bcur.execute(f"""
        CREATE TABLE IF NOT EXISTS {market}_backup (
            –ê—Ä—Ç_MC TEXT PRIMARY KEY,
            –ù–∞–ª INTEGER
        )
    """)

    if not global_stock_flags[market]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ë–î
        cur.execute(f"SELECT –ê—Ä—Ç_MC, –ù–∞–ª FROM '{market}'")
        data = cur.fetchall()

        bcur.execute(f"DELETE FROM {market}_backup")
        bcur.executemany(f"INSERT INTO {market}_backup (–ê—Ä—Ç_MC, –ù–∞–ª) VALUES (?, ?)", data)

        # –û–±–Ω—É–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        cur.execute(f"UPDATE '{market}' SET –ù–∞–ª = 0")

        logger.info(f"üì¶ –°–∫–ª–∞–¥ {market}: –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤.")
    else:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
        bcur.execute(f"SELECT –ê—Ä—Ç_MC, –ù–∞–ª FROM {market}_backup")
        backup_data = bcur.fetchall()

        cur.executemany(f"UPDATE '{market}' SET –ù–∞–ª = ? WHERE –ê—Ä—Ç_MC = ?", [(n, a) for a, n in backup_data])
        bcur.execute(f"DELETE FROM {market}_backup")

        logger.info(f"üîÅ –°–∫–ª–∞–¥ {market}: –æ—Å—Ç–∞—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞.")

    conn.commit()
    backup_conn.commit()
    conn.close()
    backup_conn.close()

    return '', 204


@app.route('/run_update')
def run_manual_update():
    try:
        update(global_stock_flags)
        update_sklad_task()
        logger.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return '', 204
        return redirect(request.referrer or url_for('index'))
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        return Response("–û—à–∏–±–∫–∞", status=500)


def requires_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if not session.get('logged_in'):
            return redirect(url_for('login'))
        return f(*args, **kwargs)

    return decorated


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if request.form['username'] == USERNAME and request.form['password'] == PASSWORD:
            session.permanent = True
            session['logged_in'] = True
            logger.success(f"üë§ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {USERNAME}")
            return redirect(url_for('index'))
        else:
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞")
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", 401
    return '''
        <!doctype html>
        <html>
        <head>
            <title>–í—Ö–æ–¥</title>
            <meta charset="utf-8">
            <link rel="icon" href="/static/favicon.ico" type="image/x-icon">
            <style>
                body {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    background: #f0f2f5;
                    margin: 0;
                    font-family: 'Inter', sans-serif;
                }
                .login-container {
                    background: white;
                    padding: 30px 40px;
                    border-radius: 15px;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                    width: 300px;
                    text-align: center;
                }
                .login-container h2 {
                    margin-bottom: 20px;
                    font-size: 24px;
                }
                .login-container input[type="text"],
                .login-container input[type="password"],
                .login-container input[type="submit"] {
                    width: 100%;
                    padding: 10px;
                    margin-bottom: 15px;
                    border: 1px solid #ccc;
                    border-radius: 8px;
                    font-size: 16px;
                    box-sizing: border-box;
                }
                .login-container input[type="submit"] {
                    background-color: #007bff;
                    color: white;
                    border: none;
                    cursor: pointer;
                    transition: background-color 0.3s;
                }
                .login-container input[type="submit"]:hover {
                    background-color: #0056b3;
                }
            </style>
        </head>
        <body>

        <div class="login-container">
            <h2>–í—Ö–æ–¥</h2>
            <form method="post">
                <input type="text" name="username" placeholder="–õ–æ–≥–∏–Ω" required><br>
                <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required><br>
                <input type="submit" value="–í–æ–π—Ç–∏">
            </form>
        </div>

        </body>
        </html>
        '''


@app.route('/')
@requires_auth
def index():
    return show_table('yandex')


@app.route('/table/<table_name>')
@requires_auth
def show_table(table_name):
    logger.info(f"üìä –û—Ç–∫—Ä—ã—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
    sort_column = request.args.get("sort")
    sort_order = request.args.get("order", "asc")  # default: ascending
    last_download_time = get_last_download_time()

    conn = sqlite3.connect(DB_PATH, timeout=10)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = [row[0] for row in cursor.fetchall()]

    if sort_column:
        query = f"SELECT * FROM '{table_name}'"
    else:
        sort_column = "–ú–æ–¥–µ–ª—å"
        sort_order = "asc"
        query = f"SELECT * FROM '{table_name}'"
    df = pd.read_sql_query(query, conn)
    search_term = request.args.get('search', '').strip().lower()
    if search_term:
        df = df[df.apply(lambda row: any(
            search_term in str(row.get(col, '')).lower()
            for col in ['–ê—Ä—Ç_MC', '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–ú–æ–¥–µ–ª—å']
        ), axis=1)]
    letter_filter = request.args.get('letter', '').strip().lower()
    if letter_filter:
        if letter_filter == '0-9':
            df = df[df['–ú–æ–¥–µ–ª—å'].str.match(r'^\d', na=False)]
        elif letter_filter == '–∞-—è':
            df = df[df['–ú–æ–¥–µ–ª—å'].str.match(r'^[–∞-—è–ê-–Ø]', na=False)]
        else:
            df = df[df['–ú–æ–¥–µ–ª—å'].str.lower().str.startswith(letter_filter)]
    if '_id' in df.columns:
        df.drop(columns=['_id'], inplace=True)
    if all(col in df.columns for col in ['–û–ø—Ç', '–ù–∞—Ü–µ–Ω–∫–∞']):
        def recalc_price(opt, markup):
            try:
                opt = float(str(opt).replace(' ', '').replace('—Ä.', ''))
                markup = float(str(markup).replace('%', '').replace(' ', ''))
                price = int(round((opt + (opt * markup / 100)) / 100.0) * 100)
                return price
            except:
                return opt

        for col in ['–¶–µ–Ω–∞ YM', '–¶–µ–Ω–∞ OZ', '–¶–µ–Ω–∞ WB']:
            if col in df.columns:
                df[col] = df.apply(lambda row: recalc_price(row['–û–ø—Ç'], row['–ù–∞—Ü–µ–Ω–∫–∞']), axis=1)
    conn.close()

    if sort_column and sort_column in df.columns:
        if sort_column == "–ú–æ–¥–µ–ª—å":
            df = df.sort_values(by=sort_column, key=lambda x: x.str.lower(), ascending=(sort_order == "asc"))
        else:
            df = df.sort_values(by=sort_column, ascending=(sort_order == "asc"))

    df.insert(0, "‚Ññ", range(1, len(df) + 1))
    # –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º –ù–∞–ª = 0
    if not global_stock_flags.get(table_name, True):
        if '–ù–∞–ª' in df.columns:
            df['–ù–∞–ª'] = 0
    # üëá –ú–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_rows = len(df)
    in_stock = df[df['–ù–∞–ª'].astype(str).str.replace(r'\D', '', regex=True).astype(float) > 0].shape[0]
    disabled = df[df['–°—Ç–∞—Ç—É—Å'].astype(str).str.lower() == '–≤—ã–∫–ª.'].shape[0]

    # –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–Ω–æ–π –ø–æ —Ç–∞–±–ª–∏—Ü–µ
    price_col_map = {
        'yandex': '–¶–µ–Ω–∞ YM',
        'ozon': '–¶–µ–Ω–∞ OZ',
        'wildberries': '–¶–µ–Ω–∞ WB'
    }
    price_col = price_col_map.get(table_name.lower(), '–¶–µ–Ω–∞ YM')

    def safe_avg(col):
        try:
            return round(
                pd.to_numeric(df[col].astype(str).str.replace(r'\D', '', regex=True), errors='coerce').dropna().mean())
        except:
            return 0

    avg_price = safe_avg(price_col)
    avg_markup = safe_avg('–ù–∞—Ü–µ–Ω–∫–∞')

    stats = {
        '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤': total_rows,
        '–í –Ω–∞–ª–∏—á–∏–∏': in_stock,
        '–û—Ç–∫–ª—é—á–µ–Ω–æ': disabled,
        f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {price_col.split()[-1]}': f'{avg_price:,} —Ä.'.replace(',', ' '),
        '–°—Ä–µ–¥–Ω—è—è –Ω–∞—Ü–µ–Ω–∫–∞': f'{avg_markup} %'
    }

    return render_template(
        "index.html",
        tables=tables,
        table_data=df,
        selected_table=table_name,
        sort_column=sort_column,
        sort_order=sort_order,
        zip=zip,  # <- –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç zip –≤ —à–∞–±–ª–æ–Ω
        stats=stats,
        last_download_time=last_download_time,
        global_stock_flags=global_stock_flags
    )


@app.route('/delete/<table>/<item_id>', methods=['POST'])
def delete_row(table, item_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM '{table}' WHERE –ê—Ä—Ç–∏–∫—É–ª = ?", (item_id,))
    conn.commit()
    conn.close()
    logger.info(f"üóë –£–¥–∞–ª—ë–Ω —Ç–æ–≤–∞—Ä {item_id} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table}")
    return redirect(url_for('show_table', table_name=table))


@app.route('/update/<table>/<item_id>', methods=['POST'])
def update_row(table, item_id):
    data = request.form.to_dict()
    if not global_stock_flags.get(table, True):
        logger.info(f"‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ: {table}")
        # –£–¥–∞–ª—è–µ–º '–ù–∞–ª', —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
        if '–ù–∞–ª' in data:
            del data['–ù–∞–ª']
    logger.debug("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {}", data)
    # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤—ã–∫–ª—é—á–µ–Ω, –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ–≥–¥–∞ 0
    if data.get('–°—Ç–∞—Ç—É—Å', '').strip() == '–≤—ã–∫–ª.':
        data['–ù–∞–ª'] = '0'
    elif not global_stock_flags.get(table, True):
        # –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º —Ñ–ª–∞–≥–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ù–∞–ª
        if '–ù–∞–ª' in data:
            del data['–ù–∞–ª']

    if "–ê—Ä—Ç_MC" in data:
        del data["–ê—Ä—Ç_MC"]

    try:
        opt = float(data.get('–û–ø—Ç', '0').replace(' ', '').replace('—Ä.', ''))
        markup = float(data.get('–ù–∞—Ü–µ–Ω–∫–∞', '0').replace(' ', '').replace('%', ''))
        raw_price = opt + (opt * markup / 100)
        price = int(round(raw_price / 100.0) * 100)
        formatted_price = str(price)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        conn_check = sqlite3.connect(DB_PATH)
        cur_check = conn_check.cursor()
        cur_check.execute(f"PRAGMA table_info('{table}')")
        table_columns = [col[1] for col in cur_check.fetchall()]
        conn_check.close()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å
        for col in ['–¶–µ–Ω–∞ YM', '–¶–µ–Ω–∞ OZ', '–¶–µ–Ω–∞ WB']:
            if col in table_columns:
                data[col] = formatted_price

        if '–ù–∞—Ü–µ–Ω–∫–∞' in data:
            data['–ù–∞—Ü–µ–Ω–∫–∞'] = str(int(markup))


    except ValueError:
        logger.warning("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –û–ø—Ç/–ù–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã.")

    columns = list(data.keys())
    values = list(data.values())

    update_clause = ", ".join([f'"{col}" = ?' for col in columns])
    logger.debug("üß© SQL –∑–∞–ø—Ä–æ—Å:", f"UPDATE '{table}' SET {update_clause} WHERE \"–ê—Ä—Ç_MC\" = ?")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute(f"UPDATE '{table}' SET {update_clause} WHERE \"–ê—Ä—Ç_MC\" = ?", values + [item_id])
        conn.commit()
        logger.debug(f"üßæ –ö–æ–ª-–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {cursor.rowcount}")
        logger.success("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.success("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", e)
    finally:
        conn.close()

    return '', 204  # No Content ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º


@app.route('/add/<table_name>', methods=['POST'])
def add_item(table_name):
    data = request.form.to_dict()
    if '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' in data and data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] is None:
        data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = data.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') or ''
    if not global_stock_flags.get(table_name, True):
        logger.warning(f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {table_name}")
        return redirect(url_for('show_table', table_name=table_name))
    logger.success("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", data)

    art_mc = data.get('–ê—Ä—Ç_MC', '').strip()
    artikul = data.get('–ê—Ä—Ç–∏–∫—É–ª', '').strip()

    if not art_mc or not artikul:
        logger.success("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ê—Ä—Ç_MC –∏–ª–∏ –ê—Ä—Ç–∏–∫—É–ª.")
        return redirect(url_for('show_table', table_name=table_name))

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ê—Ä—Ç_MC –∏–ª–∏ –ê—Ä—Ç–∏–∫—É–ª
    cursor.execute(f"SELECT COUNT(*) FROM '{table_name}' WHERE –ê—Ä—Ç_MC = ? OR –ê—Ä—Ç–∏–∫—É–ª = ?", (art_mc, artikul))
    existing_count = cursor.fetchone()[0]
    if existing_count > 0:
        conn.close()
        logger.warning("‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –ê—Ä—Ç_MC —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return redirect(url_for('show_table', table_name=table_name, duplicate='1'))

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞ (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ—é –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á—ë—Ç–∞ —Ü–µ–Ω –∏ —Ç.–¥.)
        opt = float(data.get('–û–ø—Ç', '').replace(' ', '').replace('—Ä.', ''))
        markup = float(data.get('–ù–∞—Ü–µ–Ω–∫–∞', '').replace('%', '').replace(' ', ''))
        stock = int(data.get('–ù–∞–ª', '').replace(' ', ''))
        # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤—ã–∫–ª—é—á–µ–Ω, –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ–≥–¥–∞ 0
        if data.get('–°—Ç–∞—Ç—É—Å', '').strip() == '–≤—ã–∫–ª.':
            stock = 0

        data['–ù–∞–ª'] = str(stock)
        price_ym = int(round((opt + (opt * markup / 100)) / 100.0) * 100)

        data['–û–ø—Ç'] = str(opt)
        data['–ù–∞—Ü–µ–Ω–∫–∞'] = str(int(markup))
        data['–ù–∞–ª'] = str(stock)

        cursor.execute(f"PRAGMA table_info('{table_name}')")
        columns_info = cursor.fetchall()
        table_columns = [col[1] for col in columns_info]
        if '–¶–µ–Ω–∞ YM' in table_columns:
            data['–¶–µ–Ω–∞ YM'] = str(price_ym)
        if '–¶–µ–Ω–∞ OZ' in table_columns:
            data['–¶–µ–Ω–∞ OZ'] = str(price_ym)
        if '–¶–µ–Ω–∞ WB' in table_columns:
            data['–¶–µ–Ω–∞ WB'] = str(price_ym)

        columns = list(data.keys())
        values = [data[col] for col in columns]
        placeholders = ", ".join(["?"] * len(columns))
        escaped_columns = [f'"{col}"' for col in columns]
        insert_query = f"INSERT INTO '{table_name}' ({', '.join(escaped_columns)}) VALUES ({placeholders})"

        cursor.execute(insert_query, values)
        conn.commit()
        logger.success("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
    finally:
        conn.close()

    return redirect(url_for('show_table', table_name=table_name))


@app.route('/statistic')
def show_statistic():
    logger.info("üìà –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    tables = ['yandex', 'ozon', 'wildberries']
    data = {}

    for table in tables:
        df = pd.read_sql_query(f"SELECT –ê—Ä—Ç_MC, –ü–æ—Å—Ç–∞–≤—â–∏–∫, –ê—Ä—Ç–∏–∫—É–ª, –ú–æ–¥–µ–ª—å, –°—Ç–∞—Ç—É—Å FROM '{table}'", conn)
        for _, row in df.iterrows():
            key = row['–ê—Ä—Ç_MC']
            if key not in data:
                data[key] = {
                    '–ê—Ä—Ç_MC': key,
                    '–ü–æ—Å—Ç–∞–≤—â–∏–∫': row.get('–ü–æ—Å—Ç–∞–≤—â–∏–∫', ''),
                    '–ê—Ä—Ç–∏–∫—É–ª': row.get('–ê—Ä—Ç–∏–∫—É–ª', ''),
                    '–ú–æ–¥–µ–ª—å': row.get('–ú–æ–¥–µ–ª—å', '')
                }
            mp = table.capitalize()
            data[key][mp] = True
            status = row.get('–°—Ç–∞—Ç—É—Å', '').strip().lower()
            if status == '–≤—ã–∫–ª.':
                data[key][f'–°—Ç–∞—Ç—É—Å_{mp}'] = '–≤—ã–∫–ª.'

    conn.close()
    return render_template("statistic.html", stats_data=list(data.values()))

    return render_template("statistic.html", stats_data=stats_data)


@app.errorhandler(Exception)
def handle_error(e):
    logger.exception(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", 500


if __name__ == '__main__':
    if not os.environ.get("WERKZEUG_RUN_MAIN"):  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
        scheduler = BackgroundScheduler()
        scheduler.add_job(update_sklad_task, 'interval', minutes=5)
        scheduler.add_job(backup_database, 'cron', hour=2)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2 –Ω–æ—á–∏
        scheduler.start()
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    # app.run(debug=True, use_reloader=False)   # –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ü–ö
    app.run(host="127.0.0.1", port=5050, debug=False, use_reloader=False)

