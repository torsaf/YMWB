from flask import Flask, render_template, request, redirect, url_for
from apscheduler.schedulers.background import BackgroundScheduler
from update_sklad import gen_sklad, update_sklad_db
from auto_stock_updater import update
from datetime import datetime
import pandas as pd
from flask import session, Response
from functools import wraps
from dotenv import load_dotenv
import os
import requests
from logger_config import logger, LOG_DIR
from pathlib import Path
from datetime import timedelta
import stock
import json
import sqlite3
import shutil
import glob
from flask import send_file
from copy import deepcopy
from io import BytesIO
from unlisted import generate_unlisted

last_download_time = None
LAST_UPDATE_FILE = "System/last_update.txt"
FLAGS_PATH = "System/stock_flags.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (True = –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏, False = –≤—Å—ë –æ–±–Ω—É–ª—è–µ—Ç—Å—è)
global_stock_flags = {
    "yandex": True,
    "ozon": True,
    "wildberries": True
}

def send_telegram_message(message: str):
    stock.telegram.notify(
        token=stock.telegram_got_token_error,
        chat_id=stock.telegram_chat_id_error,
        message=message
    )


def disable_invask_if_needed():
    supplier = "Invask"
    if global_stock_flags["suppliers"].get(supplier, True):  # –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å
        global_stock_flags["suppliers"][supplier] = False
        with open(FLAGS_PATH, 'w') as f:
            json.dump(global_stock_flags, f)
        logger.info(f"üïê –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier}")
    else:
        logger.debug(f"‚ÑπÔ∏è {supplier} —É–∂–µ –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

def enable_invask_if_needed():
    supplier = "Invask"
    if not global_stock_flags["suppliers"].get(supplier, True):  # –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –≤–∫–ª—é—á–∏—Ç—å
        global_stock_flags["suppliers"][supplier] = True
        with open(FLAGS_PATH, 'w') as f:
            json.dump(global_stock_flags, f)
        logger.info(f"üïò –ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier}")
    else:
        logger.debug(f"‚ÑπÔ∏è {supplier} —É–∂–µ –≤–∫–ª—é—á—ë–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

def backup_database():
    os.makedirs("System/backups", exist_ok=True)
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    backup_filename = f"System/backups/marketplace_base_{timestamp}.db"

    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É
    shutil.copy("System/marketplace_base.db", backup_filename)
    logger.info(f"üíæ –ë—ç–∫–∞–ø –±–∞–∑—ã —Å–æ–∑–¥–∞–Ω: {backup_filename}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
    backup_files = sorted(
        glob.glob("System/backups/marketplace_base_*.db"),
        key=os.path.getmtime,
        reverse=True
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14
    for old_file in backup_files[14:]:
        try:
            os.remove(old_file)
            logger.info(f"üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_file}")
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {old_file}: {e}")

def get_last_download_time():
    if os.path.exists(LAST_UPDATE_FILE):
        with open(LAST_UPDATE_FILE, "r") as f:
            return f.read().strip()
    return None


def update_sklad_task():
    try:
        logger.success("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ update_sklad.py...")
        update(global_stock_flags)
        df = gen_sklad()
        update_sklad_db(df)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        with open(LAST_UPDATE_FILE, "w") as f:
            f.write(datetime.now().strftime("%d.%m.%Y - %H:%M"))
        logger.success("‚úÖ –°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        global last_download_time
        last_download_time = datetime.now().strftime("%d.%m.%Y - %H:%M")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞")


def load_stock_flags():
    try:
        with open(FLAGS_PATH, 'r') as f:
            flags = json.load(f)
            if "suppliers" not in flags:
                flags["suppliers"] = {}
            return flags
    except Exception:
        return {
            "yandex": True,
            "ozon": True,
            "wildberries": True,
            "suppliers": {}
        }


global_stock_flags = load_stock_flags()

app = Flask(__name__)
DB_PATH = "System/marketplace_base.db"
load_dotenv(dotenv_path=os.path.join("System", ".env"))
app.secret_key = os.getenv('SECRET_KEY')
USERNAME = "admin"
PASSWORD = os.getenv('PASSWORD')
app.permanent_session_lifetime = timedelta(days=30)


@app.route('/toggle_stock/<market>', methods=['POST'])
def toggle_stock(market):
    if market not in global_stock_flags:
        return '', 400

    global_stock_flags[market] = not global_stock_flags[market]
    with open(FLAGS_PATH, 'w') as f:
        json.dump(global_stock_flags, f)

    logger.info(f"üü° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ {market}: {'ON' if global_stock_flags[market] else 'OFF'}")

    db_path = "System/marketplace_base.db"
    backup_path = "System/temp_stock_backup.db"

    conn = sqlite3.connect(DB_PATH, timeout=10)
    backup_conn = sqlite3.connect(backup_path, timeout=10)
    cur = conn.cursor()
    bcur = backup_conn.cursor()

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ë–î, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    bcur.execute(f"""
        CREATE TABLE IF NOT EXISTS {market}_backup (
            –ê—Ä—Ç_MC TEXT PRIMARY KEY,
            –ù–∞–ª INTEGER
        )
    """)

    if not global_stock_flags[market]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ë–î
        cur.execute(f"SELECT –ê—Ä—Ç_MC, –ù–∞–ª FROM '{market}'")
        data = cur.fetchall()

        bcur.execute(f"DELETE FROM {market}_backup")
        bcur.executemany(f"INSERT INTO {market}_backup (–ê—Ä—Ç_MC, –ù–∞–ª) VALUES (?, ?)", data)

        # –û–±–Ω—É–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        cur.execute(f"UPDATE '{market}' SET –ù–∞–ª = 0")

        logger.info(f"üì¶ –°–∫–ª–∞–¥ {market}: –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤.")
    else:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
        bcur.execute(f"SELECT –ê—Ä—Ç_MC, –ù–∞–ª FROM {market}_backup")
        backup_data = bcur.fetchall()

        cur.executemany(f"UPDATE '{market}' SET –ù–∞–ª = ? WHERE –ê—Ä—Ç_MC = ?", [(n, a) for a, n in backup_data])
        bcur.execute(f"DELETE FROM {market}_backup")

        logger.info(f"üîÅ –°–∫–ª–∞–¥ {market}: –æ—Å—Ç–∞—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞.")

    conn.commit()
    backup_conn.commit()
    conn.close()
    backup_conn.close()

    return '', 204


@app.route('/run_update')
def run_manual_update():
    try:
        update(global_stock_flags)
        update_sklad_task()
        logger.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return '', 204
        return redirect(request.referrer or url_for('index'))
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        return Response("–û—à–∏–±–∫–∞", status=500)


def requires_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if not session.get('logged_in'):
            return redirect(url_for('login'))
        return f(*args, **kwargs)

    return decorated


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if request.form['username'] == USERNAME and request.form['password'] == PASSWORD:
            session.permanent = True
            session['logged_in'] = True
            logger.success(f"üë§ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {USERNAME}")
            return redirect(url_for('index'))
        else:
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞")
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", 401
    return '''
        <!doctype html>
        <html>
        <head>
            <title>–í—Ö–æ–¥</title>
            <meta charset="utf-8">
            <link rel="icon" href="/static/favicon.ico" type="image/x-icon">
            <style>
                body {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    background: #f0f2f5;
                    margin: 0;
                    font-family: 'Inter', sans-serif;
                }
                .login-container {
                    background: white;
                    padding: 30px 40px;
                    border-radius: 15px;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                    width: 300px;
                    text-align: center;
                }
                .login-container h2 {
                    margin-bottom: 20px;
                    font-size: 24px;
                }
                .login-container input[type="text"],
                .login-container input[type="password"],
                .login-container input[type="submit"] {
                    width: 100%;
                    padding: 10px;
                    margin-bottom: 15px;
                    border: 1px solid #ccc;
                    border-radius: 8px;
                    font-size: 16px;
                    box-sizing: border-box;
                }
                .login-container input[type="submit"] {
                    background-color: #007bff;
                    color: white;
                    border: none;
                    cursor: pointer;
                    transition: background-color 0.3s;
                }
                .login-container input[type="submit"]:hover {
                    background-color: #0056b3;
                }
            </style>
        </head>
        <body>

        <div class="login-container">
            <h2>–í—Ö–æ–¥</h2>
            <form method="post">
                <input type="text" name="username" placeholder="–õ–æ–≥–∏–Ω" required><br>
                <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required><br>
                <input type="submit" value="–í–æ–π—Ç–∏">
            </form>
        </div>

        </body>
        </html>
        '''

@app.route('/toggle_supplier/<supplier>', methods=['POST'])
def toggle_supplier(supplier):
    global_stock_flags["suppliers"][supplier] = not global_stock_flags["suppliers"].get(supplier, True)

    with open(FLAGS_PATH, 'w') as f:
        json.dump(global_stock_flags, f)

    logger.info(f"üîÅ –ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier} –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {'ON' if global_stock_flags['suppliers'][supplier] else 'OFF'}")

    conn_main = sqlite3.connect(DB_PATH)
    conn_temp = sqlite3.connect("System/temp_stock_backup.db")
    cursor_main = conn_main.cursor()
    cursor_temp = conn_temp.cursor()

    for market in ['yandex', 'ozon', 'wildberries']:
        table_backup = f"backup_supplier_{supplier}_{market}"

        try:
            cursor_main.execute(
                "SELECT –ê—Ä—Ç_MC, –ù–∞–ª FROM marketplace WHERE –ü–æ—Å—Ç–∞–≤—â–∏–∫ = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?",
                (supplier, market)
            )
            rows = cursor_main.fetchall()

            if not global_stock_flags["suppliers"][supplier]:
                # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –±—ç–∫–∞–ø–∞, –µ—Å–ª–∏ –Ω–µ—Ç
                cursor_temp.execute(f"""
                    CREATE TABLE IF NOT EXISTS {table_backup} (
                        –ê—Ä—Ç_MC TEXT PRIMARY KEY,
                        –ù–∞–ª INTEGER
                    )
                """)
                cursor_temp.execute(f"DELETE FROM {table_backup}")

                for art, nal in rows:
                    cursor_temp.execute(
                        f"INSERT INTO {table_backup} (–ê—Ä—Ç_MC, –ù–∞–ª) VALUES (?, ?)",
                        (art, nal)
                    )

                cursor_main.execute(
                    "UPDATE marketplace SET –ù–∞–ª = 0 WHERE –ü–æ—Å—Ç–∞–≤—â–∏–∫ = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?",
                    (supplier, market)
                )
            else:
                for art, _ in rows:
                    cursor_temp.execute(
                        f"SELECT –ù–∞–ª FROM {table_backup} WHERE –ê—Ä—Ç_MC = ?",
                        (art,)
                    )
                    res = cursor_temp.fetchone()
                    if res:
                        nal = res[0]
                        cursor_main.execute(
                            "UPDATE marketplace SET –ù–∞–ª = ? WHERE –ê—Ä—Ç_MC = ? AND –ü–æ—Å—Ç–∞–≤—â–∏–∫ = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?",
                            (nal, art, supplier, market)
                        )
                        cursor_temp.execute(
                            f"DELETE FROM {table_backup} WHERE –ê—Ä—Ç_MC = ?",
                            (art,)
                        )
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {supplier} –≤ {market}: {e}")

    conn_main.commit()
    conn_temp.commit()
    conn_main.close()
    conn_temp.close()

    return '', 204


@app.route('/')
@requires_auth
def index():
    return show_table('yandex')


@app.route('/table/<table_name>')
@requires_auth
def show_table(table_name):
    logger.info(f"üìä –û—Ç–∫—Ä—ã—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
    sort_column = request.args.get("sort")
    sort_order = request.args.get("order", "asc")  # default: ascending
    last_download_time = get_last_download_time()

    conn = sqlite3.connect(DB_PATH, timeout=10)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = [row[0] for row in cursor.fetchall()]

    if not sort_column:
        sort_column = "–ú–æ–¥–µ–ª—å"
        sort_order = "asc"

    query = "SELECT * FROM marketplace WHERE –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?"
    df = pd.read_sql_query(query, conn, params=(table_name,))
    if "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" in df.columns:
        df.drop(columns=["–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"], inplace=True)
    search_term = request.args.get('search', '').strip().lower()
    if search_term:
        df = df[df.apply(lambda row: any(
            search_term in str(row.get(col, '')).lower()
            for col in ['–ê—Ä—Ç_MC', '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–ú–æ–¥–µ–ª—å']
        ), axis=1)]
    letter_filter = request.args.get('letter', '').strip().lower()
    if letter_filter:
        if letter_filter == '0-9':
            df = df[df['–ú–æ–¥–µ–ª—å'].str.match(r'^\d', na=False)]
        elif letter_filter == '–∞-—è':
            df = df[df['–ú–æ–¥–µ–ª—å'].str.match(r'^[–∞-—è–ê-–Ø]', na=False)]
        else:
            df = df[df['–ú–æ–¥–µ–ª—å'].str.lower().str.startswith(letter_filter)]
    if '_id' in df.columns:
        df.drop(columns=['_id'], inplace=True)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" –≤ datetime –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" in df.columns:
        try:
            df["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] = pd.to_datetime(df["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"], format="%d.%m.%Y %H:%M", errors="coerce")
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç: {e}")
    if all(col in df.columns for col in ['–û–ø—Ç', '–ù–∞—Ü–µ–Ω–∫–∞']):
        def recalc_price(opt, markup):
            try:
                opt = float(str(opt).replace(' ', '').replace('—Ä.', ''))
                markup = float(str(markup).replace('%', '').replace(' ', ''))
                price = int(round((opt + (opt * markup / 100)) / 100.0) * 100)
                return price
            except:
                return opt

        if '–û–ø—Ç' in df.columns and '–ù–∞—Ü–µ–Ω–∫–∞' in df.columns and '–¶–µ–Ω–∞' in df.columns:
            df['–¶–µ–Ω–∞'] = df.apply(lambda row: recalc_price(row['–û–ø—Ç'], row['–ù–∞—Ü–µ–Ω–∫–∞']), axis=1)
    conn.close()

    if sort_column and sort_column in df.columns:
        if sort_column == "–ú–æ–¥–µ–ª—å":
            df = df.sort_values(by=sort_column, key=lambda x: x.str.lower(), ascending=(sort_order == "asc"))
        else:
            df = df.sort_values(by=sort_column, ascending=(sort_order == "asc"))

    df.insert(0, "‚Ññ", range(1, len(df) + 1))
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è Yandex –∏ Ozon
    if table_name != "wildberries":
        for col in ["WB Barcode", "WB –ê—Ä—Ç–∏–∫—É–ª"]:
            if col in df.columns:
                df.drop(columns=[col], inplace=True)
    # –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º –ù–∞–ª = 0
    if not global_stock_flags.get(table_name, True):
        if '–ù–∞–ª' in df.columns:
            df['–ù–∞–ª'] = 0
    # üëá –ú–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_rows = len(df)
    in_stock = df[df['–ù–∞–ª'].astype(str).str.replace(r'\D', '', regex=True).astype(float) > 0].shape[0]
    disabled = df[df['–°—Ç–∞—Ç—É—Å'].astype(str).str.lower() == '–≤—ã–∫–ª.'].shape[0]

    price_col = '–¶–µ–Ω–∞'

    def safe_avg(col):
        try:
            return round(
                pd.to_numeric(df[col].astype(str).str.replace(r'\D', '', regex=True), errors='coerce').dropna().mean())
        except:
            return 0

    avg_price = safe_avg(price_col)
    avg_markup = safe_avg('–ù–∞—Ü–µ–Ω–∫–∞')

    stats = {
        '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤': total_rows,
        '–í –Ω–∞–ª–∏—á–∏–∏': in_stock,
        '–û—Ç–∫–ª—é—á–µ–Ω–æ': disabled,
        f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {price_col.split()[-1]}': f'{avg_price:,} —Ä.'.replace(',', ' '),
        '–°—Ä–µ–¥–Ω—è—è –Ω–∞—Ü–µ–Ω–∫–∞': f'{avg_markup} %'
    }

    # üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç df)
    # üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    conn_sup = sqlite3.connect(DB_PATH)
    try:
        supplier_df = pd.read_sql_query("SELECT DISTINCT –ü–æ—Å—Ç–∞–≤—â–∏–∫ FROM marketplace", conn_sup)
        suppliers_list = sorted(s for s in supplier_df['–ü–æ—Å—Ç–∞–≤—â–∏–∫'].dropna().unique() if s.strip())
    except Exception:
        suppliers_list = []
    conn_sup.close()

    saved_form_data = session.pop('saved_form', {})
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥ (–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º)
    if "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" in df.columns:
        df["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] = df["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"].dt.strftime("%d.%m.%Y %H:%M")
    has_errors = has_error_products()

    print("üî• has_errors =", has_errors)
    logger.debug(f"üî• has_errors = {has_errors}")
    return render_template(
        "index.html",
        tables=tables,
        table_data=df,
        selected_table=table_name,
        sort_column=sort_column,
        sort_order=sort_order,
        zip=zip,
        stats=stats,
        last_download_time=last_download_time,
        global_stock_flags=global_stock_flags,
        saved_form_data=saved_form_data,
        suppliers_list=suppliers_list,
        has_errors = has_errors
    )


@app.route('/delete/<table>/<item_id>', methods=['POST'])
def delete_row(table, item_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ –ê—Ä—Ç_MC –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
    cursor.execute("SELECT –ú–æ–¥–µ–ª—å, –ê—Ä—Ç_MC FROM marketplace WHERE –ê—Ä—Ç–∏–∫—É–ª = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?", (item_id, table))
    result = cursor.fetchone()
    model, art_mc = result if result else ("", "")

    cursor.execute("DELETE FROM marketplace WHERE –ê—Ä—Ç–∏–∫—É–ª = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?", (item_id, table))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    send_telegram_message(f"üóë –£–¥–∞–ª—ë–Ω –∏–∑ {table.upper()}:\n{model} / {art_mc}")
    logger.warning(f"üóë –£–¥–∞–ª—ë–Ω —Ç–æ–≤–∞—Ä –∏–∑ {table.upper()}: {model} / {art_mc}")

    return redirect(url_for('show_table', table_name=table, search=''))


@app.route('/update/<table>/<item_id>', methods=['POST'])
def update_row(table, item_id):
    data = request.form.to_dict()
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM marketplace WHERE –ê—Ä—Ç_MC = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?", (item_id, table))
    row = cursor.fetchone()
    column_names = [description[0] for description in cursor.description]
    old_data = dict(zip(column_names, row)) if row else {}

    if not old_data:
        conn.close()
        logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å –ê—Ä—Ç_MC = {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return '', 400

    if not global_stock_flags.get(table, True):
        logger.info(f"‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ: {table}")
        if '–ù–∞–ª' in data:
            del data['–ù–∞–ª']

    model = old_data.get("–ú–æ–¥–µ–ª—å", "‚Äî")
    opt_old = int(old_data.get("–û–ø—Ç", 0))
    stock_old = int(old_data.get("–ù–∞–ª", 0))
    price_old = 0

    price_old = int(old_data.get("–¶–µ–Ω–∞", 0) or 0)

    try:
        stock_new = int(data.get("–ù–∞–ª", 0))
        opt_new = int(data.get("–û–ø—Ç", 0))
        markup = float(data.get("–ù–∞—Ü–µ–Ω–∫–∞", "0").replace('%', '').replace(' ', ''))
        price_new = round((opt_new + opt_new * markup / 100) / 100.0) * 100
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∏—Å–µ–ª: {e}")
        stock_new, opt_new, price_new = stock_old, opt_old, price_old

    if (stock_old != stock_new) or (opt_old != opt_new) or (price_old != price_new):
        logger.debug(
            f"‚úÖ {table} | {item_id} ({model}) ‚Üí "
            f"stock: {stock_old} ‚Üí {stock_new}, "
            f"opt: {opt_old} ‚Üí {opt_new}, "
            f"price: {price_old} ‚Üí {price_new}"
        )
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ "–ù–∞–ª", –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–≤—ã–∫–ª."
    if data.get('–°—Ç–∞—Ç—É—Å', '').strip() == '–≤—ã–∫–ª.':
        data['–ù–∞–ª'] = '0'
    elif not global_stock_flags.get(table, True):
        if '–ù–∞–ª' in data:
            del data['–ù–∞–ª']

    # –£–¥–∞–ª–∏—Ç—å –ê—Ä—Ç_MC –∏–∑ –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data.pop("–ê—Ä—Ç_MC", None)

    try:
        opt = float(data.get('–û–ø—Ç', '0').replace(' ', '').replace('—Ä.', ''))
        markup = float(data.get('–ù–∞—Ü–µ–Ω–∫–∞', '0').replace(' ', '').replace('%', ''))
        raw_price = opt + (opt * markup / 100)
        price = int(round(raw_price / 100.0) * 100)
        formatted_price = str(price)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        conn_check = sqlite3.connect(DB_PATH)
        cur_check = conn_check.cursor()
        cur_check.execute("PRAGMA table_info(marketplace)")
        table_columns = [col[1] for col in cur_check.fetchall()]
        conn_check.close()

        data['–¶–µ–Ω–∞'] = formatted_price  # –í –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–ª–æ–Ω–∫–∞ '–¶–µ–Ω–∞' –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å

        if '–ù–∞—Ü–µ–Ω–∫–∞' in data:
            data['–ù–∞—Ü–µ–Ω–∫–∞'] = str(int(markup))

    except ValueError:
        logger.warning("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –û–ø—Ç/–ù–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã.")

    # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    important_fields = [
        "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ú–æ–¥–µ–ª—å", "–°—Ç–∞—Ç—É—Å", "–ù–∞–ª", "–û–ø—Ç", "–ù–∞—Ü–µ–Ω–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–¶–µ–Ω–∞", "WB –ê—Ä—Ç–∏–∫—É–ª",
        "WB Barcode"
    ]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
    changed = False
    for field in important_fields:
        old_val = str(old_data.get(field, "")).strip()
        new_val = str(data.get(field, "")).strip()
        if field == "–ù–∞–ª" and old_data.get("–°—Ç–∞—Ç—É—Å", "").strip() == "–≤—ã–∫–ª." and old_val == "0" and new_val != old_val:
            # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ª–∏—á–∏—è –≤ –ù–∞–ª, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤—ã–∫–ª—é—á–µ–Ω –∏ –ù–∞–ª=0 ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            new_val = "0"
        if old_val != new_val:
            changed = True
            break

    if changed:
        data["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] = datetime.now().strftime("%d.%m.%Y %H:%M")

    columns = list(data.keys())
    values = list(data.values())
    update_clause = ", ".join([f'"{col}" = ?' for col in columns])

    logger.debug(f"üß© SQL –∑–∞–ø—Ä–æ—Å: UPDATE '{table}' SET {update_clause} WHERE \"–ê—Ä—Ç_MC\" = ?")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute(
            f"UPDATE marketplace SET {update_clause} WHERE –ê—Ä—Ç_MC = ? AND –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?",
            values + [item_id, table]
        )
        conn.commit()
        logger.debug(f"üßæ –ö–æ–ª-–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {cursor.rowcount}")
        logger.success("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞
        cursor.execute(f"SELECT –°—Ç–∞—Ç—É—Å, –ú–æ–¥–µ–ª—å FROM '{table}' WHERE –ê—Ä—Ç_MC = ?", (item_id,))
        row = cursor.fetchone()
        if row:
            new_status, model = row
            old_status = old_data.get("–°—Ç–∞—Ç—É—Å", "").strip().lower()
            new_status = (new_status or "").strip().lower()
            if old_status != new_status:
                action = "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù" if new_status == "–≤—ã–∫–ª." else "üü¢ –í–ö–õ–Æ–ß–ï–ù"
                logger.info(f"{action}: {model} ({item_id}) –≤ —Ç–∞–±–ª–∏—Ü–µ {table.upper()}")

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:")
    finally:
        conn.close()

    return '', 204


@app.route('/download_log')
def download_log():
    today_str = datetime.now().strftime("%Y-%m-%d")
    log_file_path = LOG_DIR / "app.log"

    if not log_file_path.exists():
        logger.warning("üìÅ –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return "–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

    return send_file(log_file_path, as_attachment=True)


@app.route('/add/<table_name>', methods=['POST'])
def add_item(table_name):
    from datetime import datetime
    data = request.form.to_dict()

    if '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' in data and data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] is None:
        data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = data.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') or ''

    if not global_stock_flags.get(table_name, True):
        logger.warning(f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {table_name}")
        return redirect(url_for('show_table', table_name=table_name))

    art_mc = data.get('–ê—Ä—Ç_MC', '').strip()
    artikul = data.get('–ê—Ä—Ç–∏–∫—É–ª', '').strip()

    if not art_mc or not artikul:
        logger.warning("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ê—Ä—Ç_MC –∏–ª–∏ –ê—Ä—Ç–∏–∫—É–ª.")
        return redirect(url_for('show_table', table_name=table_name))

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    model = data.get('–ú–æ–¥–µ–ª—å', '').strip()
    wb_barcode = data.get('WB Barcode', '').strip()
    wb_artikul = data.get('WB –ê—Ä—Ç–∏–∫—É–ª', '').strip()

    cursor.execute("""
        SELECT COUNT(*) FROM marketplace
        WHERE –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å = ?
          AND (
            –ê—Ä—Ç_MC = ?
            OR –ê—Ä—Ç–∏–∫—É–ª = ?
            OR –ú–æ–¥–µ–ª—å = ?
            OR "WB Barcode" = ?
            OR "WB –ê—Ä—Ç–∏–∫—É–ª" = ?
        )
    """, (table_name, art_mc, artikul, model, wb_barcode, wb_artikul))
    existing_count = cursor.fetchone()[0]

    if existing_count > 0:
        conn.close()
        logger.warning("‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –ê—Ä—Ç_MC, –ê—Ä—Ç–∏–∫—É–ª, –ú–æ–¥–µ–ª—å, WB Barcode –∏–ª–∏ WB –ê—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        session['saved_form'] = data
        return redirect(url_for('show_table', table_name=table_name, duplicate='1'))

    try:
        opt = float(data.get('–û–ø—Ç', '').replace(' ', '').replace('—Ä.', ''))
        markup = float(data.get('–ù–∞—Ü–µ–Ω–∫–∞', '').replace('%', '').replace(' ', ''))
        stock = int(data.get('–ù–∞–ª', '').replace(' ', ''))
        if data.get('–°—Ç–∞—Ç—É—Å', '').strip() == '–≤—ã–∫–ª.':
            stock = 0

        data['–ù–∞–ª'] = str(stock)
        price_ym = int(round((opt + (opt * markup / 100)) / 100.0) * 100)

        data['–û–ø—Ç'] = str(opt)
        data['–ù–∞—Ü–µ–Ω–∫–∞'] = str(int(markup))
        data['–ù–∞–ª'] = str(stock)

        data['–¶–µ–Ω–∞'] = str(price_ym)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        data["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"] = datetime.now().strftime("%d.%m.%Y %H:%M")

        data["–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"] = table_name  # –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤

        columns = list(data.keys())
        values = [data[col] for col in columns]
        placeholders = ", ".join(["?"] * len(columns))
        escaped_columns = [f'"{col}"' for col in columns]
        insert_query = f"INSERT INTO marketplace ({', '.join(escaped_columns)}) VALUES ({placeholders})"

        cursor.execute(insert_query, values)
        conn.commit()
        send_telegram_message(f"‚úÖ –í {table_name.upper()} –¥–æ–±–∞–≤–ª–µ–Ω:\n{data.get('–ú–æ–¥–µ–ª—å', '')} / {art_mc}")
        logger.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä –≤ {table_name.upper()}: {data.get('–ú–æ–¥–µ–ª—å', '')} / {art_mc}, –ø–æ—Å—Ç–∞–≤—â–∏–∫: {data.get('–ü–æ—Å—Ç–∞–≤—â–∏–∫', '')}")


    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
    finally:
        conn.close()

    return redirect(url_for('show_table', table_name=table_name, added='1'))



@app.route('/statistic')
@requires_auth
def show_statistic():
    logger.info("üìà –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query("SELECT –ê—Ä—Ç_MC, –ü–æ—Å—Ç–∞–≤—â–∏–∫, –ê—Ä—Ç–∏–∫—É–ª, –ú–æ–¥–µ–ª—å, –°—Ç–∞—Ç—É—Å, –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, –û–ø—Ç, –ù–∞–ª FROM marketplace", conn)
    conn.close()

    data = {}
    supplier_stats = {}

    for _, row in df.iterrows():
        art_mc = row['–ê—Ä—Ç_MC']
        supplier = row.get('–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        status = (row.get('–°—Ç–∞—Ç—É—Å') or '').strip().lower()
        mp = row.get('–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '').capitalize()

        if art_mc not in data:
            data[art_mc] = {
                '–ê—Ä—Ç_MC': art_mc,
                '–ü–æ—Å—Ç–∞–≤—â–∏–∫': supplier,
                '–ê—Ä—Ç–∏–∫—É–ª': row.get('–ê—Ä—Ç–∏–∫—É–ª', ''),
                '–ú–æ–¥–µ–ª—å': row.get('–ú–æ–¥–µ–ª—å', '')
            }

        data[art_mc][mp] = True
        if status == '–≤—ã–∫–ª.':
            data[art_mc][f'–°—Ç–∞—Ç—É—Å_{mp}'] = '–≤—ã–∫–ª.'

        if supplier not in supplier_stats:
            supplier_stats[supplier] = {
                'Yandex': 0,
                'Ozon': 0,
                'Wildberries': 0,
                '–í—Å–µ–≥–æ': 0,
                '–ê–∫—Ç–∏–≤–Ω–æ': 0,
                '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ': 0
            }

        supplier_stats[supplier][mp] += 1
        supplier_stats[supplier]['–í—Å–µ–≥–æ'] += 1
        if status == '–≤—ã–∫–ª.':
            supplier_stats[supplier]['–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'] += 1
        else:
            supplier_stats[supplier]['–ê–∫—Ç–∏–≤–Ω–æ'] += 1

    errors = detect_errors_across_marketplaces()

    return render_template(
        "statistic.html",
        stats_data=list(data.values()),
        supplier_stats=supplier_stats,
        errors=errors
    )




def has_error_products():
    errors = detect_errors_across_marketplaces()
    return len(errors) > 0

def detect_errors_across_marketplaces():
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query("SELECT * FROM marketplace", conn)
    conn.close()

    if df.empty:
        return []

    df["–ò—Å—Ç–æ—á–Ω–∏–∫"] = df["–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"].str.capitalize()

    grouped = df.groupby("–ê—Ä—Ç_MC")
    error_groups = []

    for art_mc, group in grouped:
        if len(group) <= 1:
            continue

        records = group.to_dict(orient="records")
        fields_to_check = ["–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ú–æ–¥–µ–ª—å", "–°—Ç–∞—Ç—É—Å", "–ù–∞–ª", "–û–ø—Ç"]

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ –ø–æ–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
        has_differences = any(
            len(set(str(r.get(field, '')).strip() for r in records)) > 1
            for field in fields_to_check
        )

        if has_differences:
            for item in records:
                diff = {}
                for field in fields_to_check:
                    values = set(str(r.get(field, '')).strip() for r in records)
                    diff[field] = len(values) > 1
                item['diff'] = diff
                error_groups.append(item)

    return error_groups




@app.errorhandler(Exception)
def handle_error(e):
    logger.exception(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", 500

@app.route('/download_unlisted')
def download_unlisted():
    try:
        df = generate_unlisted()
        if df.empty:
            logger.info("üìÑ –§–∞–π–ª not_listed.xlsx –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: –ø—É—Å—Ç–æ–π DataFrame.")
            return Response("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏", status=400)

        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–ù–µ–≤—ã–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã')
        output.seek(0)

        logger.info("‚úÖ –§–∞–π–ª not_listed.xlsx —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return send_file(
            output,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            as_attachment=True,
            download_name='not_listed.xlsx'
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ not_listed.xlsx: {e}", exc_info=True)
        return Response("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞.", status=500)


if __name__ == '__main__':
    if not os.environ.get("WERKZEUG_RUN_MAIN"):  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
        scheduler = BackgroundScheduler()
        scheduler.add_job(update_sklad_task, 'interval', minutes=5)
        scheduler.add_job(backup_database, 'cron', hour=2)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2 –Ω–æ—á–∏
        scheduler.add_job(disable_invask_if_needed, 'cron', day_of_week='fri', hour=1, minute=0) # –ü—è—Ç–Ω–∏—Ü–∞ 01:00
        scheduler.add_job(enable_invask_if_needed, 'cron', day_of_week='sun', hour=23, minute=0) # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 23:00
        scheduler.start()
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    app.run(host="127.0.0.1", port=5050, debug=False, use_reloader=False)

