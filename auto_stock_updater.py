"""
–ú–æ–¥—É–ª—å `auto_stock_updater` –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö (ozon, wildberries, yandex)
–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (!YMWB.db ‚Üí —Ç–∞–±–ª–∏—Ü–∞ prices).

–û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏:
- –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∏ –û–ü–¢ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prices.
- –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ marketplace_base.db.
- –û–±–Ω—É–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —É –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Ç–µ—Ö, —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ.
- –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã (–±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).
"""

import sqlite3
from logger_config import logger
from datetime import datetime

def update(flags):
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")

    # --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
    source_conn = sqlite3.connect('System/!YMWB.db', timeout=10)
    target_conn = sqlite3.connect('System/marketplace_base.db', timeout=10)
    source_cursor = source_conn.cursor()
    cursor = target_conn.cursor()

    now_str = datetime.now().strftime("%d.%m.%Y %H:%M")

    # --- 1. –û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ <3 —É –≤–Ω–µ—à–Ω–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ ---
    logger.info("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (Invask, Okno, United): –æ—Å—Ç–∞—Ç–æ–∫ <3 ‚Üí 0")
    source_cursor.execute("""
        UPDATE prices
           SET "–ù–∞–ª–∏—á–∏–µ" = 0
         WHERE UPPER(TRIM("–ü–æ—Å—Ç–∞–≤—â–∏–∫")) IN ('INVASK', 'OKNO', 'UNITED')
           AND CAST("–ù–∞–ª–∏—á–∏–µ" AS INTEGER) < 3
    """)
    affected = source_conn.total_changes
    source_conn.commit()
    logger.info(f"üîß –û–±–Ω—É–ª–µ–Ω–æ {affected} –∑–∞–ø–∏—Å–µ–π –≤ !YMWB.db (–æ—Å—Ç–∞—Ç–æ–∫ <3)")

    # --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã prices –≤ –ø–∞–º—è—Ç—å ---
    source_cursor.execute("""SELECT "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢" FROM prices""")
    source_data = source_cursor.fetchall()
    logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_data)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prices")

    source_dict = {}
    for supplier, article, stock, opt in source_data:
        try:
            supplier = str(supplier or "").strip()
            article = str(article or "").strip()
            stock = int(stock or 0)
            opt = int(opt or 0)
            if supplier != "Sklad" and stock < 3:
                stock = 0
            source_dict[(supplier, article)] = (stock, opt)
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ prices: {e}")

    # --- 3. –û—Å–Ω–æ–≤–Ω–æ–π SELECT –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º ---
    cursor.execute("""
        SELECT rowid, –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, Sklad, Invask, Okno, United,
               –°—Ç–∞—Ç—É—Å, –ú–æ–¥–µ–ª—å, –ù–∞–ª, –û–ø—Ç, "%", –¶–µ–Ω–∞
        FROM marketplace
    """)
    all_rows = cursor.fetchall()
    total_rows = len(all_rows)

    updated_rows = []
    cleared_rows = []
    updated = 0
    cleared = 0

    # --- 4. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
    for row in all_rows:
        (rowid, mp, code_sklad, code_invask, code_okno, code_united,
         status, model, old_stock, old_opt, markup, old_price) = row

        mp = (mp or "").strip().lower()
        status = (status or "").strip().lower()
        model = model or "‚Äî"

        if not flags.get(mp, True):
            continue

        # --- –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ---
        if status == "–≤—ã–∫–ª.":
            if str(old_stock).strip() != "0":
                cleared_rows.append((0, now_str, rowid))
                cleared += 1
            continue

        # --- –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ---
        def get_from_source(supplier_name, code_value):
            if not code_value:
                return 0, None
            return source_dict.get((supplier_name, str(code_value).strip()), (0, None))

        chosen_supplier = ""
        chosen_stock = 0
        chosen_opt = None

        # --- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Sklad ---
        if code_sklad:
            st, opt_val = get_from_source("Sklad", code_sklad)
            if st >= 1:
                chosen_supplier = "Sklad"
                chosen_stock, chosen_opt = st, opt_val

        # --- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Invask/Okno/United ---
        if not chosen_supplier:
            candidates = []
            for sup_name, sup_code in (("Invask", code_invask),
                                       ("Okno", code_okno),
                                       ("United", code_united)):
                st, opt_val = get_from_source(sup_name, sup_code)
                if (st or 0) > 0 and opt_val is not None:
                    candidates.append((sup_name, int(st), float(opt_val)))
            if candidates:
                order = {"Invask": 0, "Okno": 1, "United": 2}
                candidates.sort(key=lambda x: (x[2], order.get(x[0], 9)))
                chosen_supplier, chosen_stock, chosen_opt = candidates[0]

        new_stock = chosen_stock if chosen_supplier else 0
        new_opt = chosen_opt if chosen_opt is not None else old_opt

        # --- –ø–µ—Ä–µ—Å—á—ë—Ç —Ü–µ–Ω—ã ---
        try:
            markup_val = float(str(markup).replace('%', '').replace(' ', '')) if markup else 0.0
            base_opt = float(str(new_opt).replace(' ', '').replace('—Ä.', '')) if new_opt else 0.0
            new_price = round((base_opt + base_opt * markup_val / 100.0) / 100.0) * 100
        except Exception:
            new_price = 0
            base_opt = 0

        try:
            old_stock = int(old_stock or 0)
            old_opt = int(old_opt or 0)
            old_price = int(old_price or 0)
        except Exception:
            old_stock = old_opt = old_price = 0

        if (old_stock != new_stock) or (old_opt != int(base_opt)) or (old_price != int(new_price)):
            updated_rows.append((new_stock, int(base_opt), int(new_price), now_str, rowid))
            updated += 1

    # --- –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –∏ –æ–±–Ω—É–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ ---
    if updated_rows:
        cursor.executemany("""
            UPDATE marketplace
               SET –ù–∞–ª=?, –û–ø—Ç=?, –¶–µ–Ω–∞=?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"=?
             WHERE rowid=?
        """, updated_rows)

    if cleared_rows:
        cursor.executemany("""
            UPDATE marketplace
               SET –ù–∞–ª=?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"=?
             WHERE rowid=?
        """, cleared_rows)

    # --- —Ñ–∏–∫—Å–∞—Ü–∏—è ---
    target_conn.commit()

    # --- –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
    source_conn.close()
    target_conn.close()

    logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_rows} —Å—Ç—Ä–æ–∫ | –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated} | –û–±–Ω—É–ª–µ–Ω–æ: {cleared}")
    logger.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

