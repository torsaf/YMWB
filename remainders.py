"""
–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è:
- gen_sklad: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞ sklad_prices –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
- wb_update: –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ Wildberries.
- ym_update: –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ Yandex.Market.
- mm_update: –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ MegaMarket.
"""

import requests
import os
from dotenv import load_dotenv
from datetime import datetime, timezone
from notifiers import get_notifier
import pandas as pd
import json
import time
import gspread

load_dotenv()

telegram_got_token = os.getenv('telegram_got_token')
telegram_chat_id = os.getenv('telegram_chat_id')
telegram_got_token_error = os.getenv('telegram_got_token_error')
telegram_chat_id_error = os.getenv('telegram_chat_id_error')
telegram = get_notifier('telegram')


def gen_sklad():
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã pandas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    pd.set_option('display.max_columns', None)
    pd.set_option('display.width', 1000)

    # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ Wildberries
    wb_file = 'sklad_prices_wildberries.csv'
    wb_data = pd.read_csv(wb_file, dtype={'WB Barcode': str})
    wb_data['WB Barcode'] = wb_data['WB Barcode'].str.strip()
    wb_data = wb_data.dropna(subset=['WB Barcode', '–ù–∞–ª–∏—á–∏–µ'])
    wb_final = [{"sku": row['WB Barcode'], "amount": int(row['–ù–∞–ª–∏—á–∏–µ'])} for _, row in wb_data.iterrows()]

    # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ Yandex
    ym_file = 'sklad_prices_yandex.csv'
    ym_data = pd.read_csv(ym_file, dtype={'YM': str})
    ym_data['YM'] = ym_data['YM'].str.strip()
    ym_data = ym_data.dropna(subset=['YM', '–ù–∞–ª–∏—á–∏–µ'])
    current_time = datetime.now(timezone.utc).isoformat()
    ym_final = [
        {
            "sku": str(row['YM']),
            "items": [{"count": int(row['–ù–∞–ª–∏—á–∏–µ']), "updatedAt": current_time}]
        }
        for _, row in ym_data.iterrows()
    ]

    # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ Megamarket
    mm_file = 'sklad_prices_megamarket.csv'
    mm_data = pd.read_csv(mm_file, dtype={'MM': str})
    mm_data['MM'] = mm_data['MM'].str.strip()
    mm_data = mm_data.dropna(subset=['MM', '–ù–∞–ª–∏—á–∏–µ'])
    mm_final = [
        {
            "offerId": str(row['MM']),
            "quantity": int(row['–ù–∞–ª–∏—á–∏–µ'])
        }
        for _, row in mm_data.iterrows()
    ]

    # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ Ozon
    oz_file = 'sklad_prices_ozon.csv'
    oz_data = pd.read_csv(oz_file, dtype={'OZ': str})
    # oz_data['OZ'] = oz_data['OZ'].str.strip().str.rstrip('.0')
    oz_data = oz_data.dropna(subset=['OZ', '–ù–∞–ª–∏—á–∏–µ'])
    warehouse_id = 1020002115578000  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞
    oz_final = [
        {
            "offer_id": str(row['OZ']),
            "product_id": int(row['OZ']),  # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ `OZ` —Ç–∞–∫–∂–µ —è–≤–ª—è–µ—Ç—Å—è product_id
            "stock": int(row['–ù–∞–ª–∏—á–∏–µ']),
            "warehouse_id": warehouse_id
        }
        for _, row in oz_data.iterrows()
    ]

    return wb_final, ym_final, mm_final, oz_final


def oz_update(oz_data):
    ozon_client_id = os.getenv('ozon_client_ID')
    ozon_api_key = os.getenv('ozon_API_key')
    url_ozon = 'https://api-seller.ozon.ru/v2/products/stocks'

    headers = {
        'Client-Id': ozon_client_id,
        'Api-Key': ozon_api_key,
        'Content-Type': 'application/json'
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
    payload = {
        "stocks": oz_data
    }

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    # print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ Ozon:")
    # print(json.dumps(payload, indent=4, ensure_ascii=False))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
    response = requests.post(url_ozon, headers=headers, json=payload)
    if response.status_code != 200:
        message = f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞ Ozon. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}, –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}"
        telegram.notify(token=telegram_got_token_error, chat_id=telegram_chat_id_error, message=message)


def wb_update(wb_data):
    wb_api_token = os.getenv('wb_token')
    warehouse_id = int(os.getenv('warehouseId'))
    # url_wb = f'https://suppliers-api.wildberries.ru/api/v3/stocks/{warehouse_id}'
    url_wb = f'https://marketplace-api.wildberries.ru/api/v3/stocks/{warehouse_id}'
    headers = {
        'Authorization': wb_api_token,
        'stocks': 'application/json'
    }
    params = {'warehouseId': warehouse_id, 'stocks': wb_data}
    response = requests.put(url_wb, headers=headers, json=params)
    if response.status_code != 204:
        message = f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞ WB. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}"
        telegram.notify(token=telegram_got_token_error, chat_id=telegram_chat_id_error, message=message)


def ym_update(ym_data):
    ym_token = os.getenv('ym_token')
    campaign_id = os.getenv('campaign_id')
    url_ym = f'https://api.partner.market.yandex.ru/campaigns/{campaign_id}/offers/stocks'
    headers = {"Authorization": f"Bearer {ym_token}"}
    stock_data = {"skus": ym_data}
    response = requests.put(url_ym, headers=headers, json=stock_data)
    if response.status_code != 200:
        message = f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞ YM. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}"
        telegram.notify(token=telegram_got_token_error, chat_id=telegram_chat_id_error, message=message)


def mm_update(mm_data):
    mm_token = os.getenv('mm_token')
    url_mm = 'https://api.megamarket.tech/api/merchantIntegration/v1/offerService/stock/update'
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    payload = {
        "meta": {},
        "data": {
            "token": mm_token,
            "stocks": mm_data
        }
    }
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º payload –≤ —Å—Ç—Ä–æ–∫—É JSON
    payload_json = json.dumps(payload)
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = requests.post(url_mm, headers=headers, data=payload_json)
    if response.status_code != 200:
        message = f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞ MM. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}"
        telegram.notify(token=telegram_got_token_error, chat_id=telegram_chat_id_error, message=message)
