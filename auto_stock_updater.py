"""
–ú–æ–¥—É–ª—å `auto_stock_updater` –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö (ozon, wildberries, yandex)
–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (!YMWB.db ‚Üí —Ç–∞–±–ª–∏—Ü–∞ prices).

–û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏:
- –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∏ –û–ü–¢ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã prices.
- –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ marketplace_base.db.
- –û–±–Ω—É–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —É –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Ç–µ—Ö, —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ.
- –õ–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–æ–º–æ—â—å—é loguru.
"""

import sqlite3
from logger_config import logger
from datetime import datetime
import json
import os

def update(flags):
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
    source_conn = sqlite3.connect('System/!YMWB.db', timeout=10)
    target_conn = sqlite3.connect('System/marketplace_base.db', timeout=10)
    logger.debug("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    source_cursor = source_conn.cursor()
    source_cursor.execute("""
        SELECT "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢" FROM prices
    """)
    source_data = source_cursor.fetchall()
    logger.debug(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(source_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (prices)")

    source_dict = {
        (supplier.strip(), article.strip()): (stock, opt)
        for supplier, article, stock, opt in source_data
    }

    target_tables = ["ozon", "wildberries", "yandex"]

    for table in target_tables:
        if not flags.get(table, True):
            logger.info(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {table} ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ñ–ª–∞–≥–∞—Ö")
            continue

        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table}")
        target_cursor = target_conn.cursor()
        target_cursor.execute(f"""
            SELECT rowid, "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–°—Ç–∞—Ç—É—Å", "–ú–æ–¥–µ–ª—å" FROM "{table}"
        """)
        rows = target_cursor.fetchall()

        for rowid, supplier, article, status, model in rows:
            supplier = supplier.strip()
            article = article.strip()
            status = status.strip().lower()
            model = model.strip() if model else "‚Äî"
            key = (supplier, article)

            if status == "–≤—ã–∫–ª.":
                target_cursor.execute(f"""SELECT "–ù–∞–ª" FROM "{table}" WHERE rowid = ?""", (rowid,))
                current_stock = target_cursor.fetchone()
                if current_stock and int(current_stock[0]) != 0:
                    logger.debug(f"‚õî {table} | {article} ({model}) ‚Äî —Å—Ç–∞—Ç—É—Å '–≤—ã–∫–ª.' ‚Üí –æ–±–Ω—É–ª—è–µ–º stock")
                    target_cursor.execute(f"""
                        UPDATE "{table}" SET "–ù–∞–ª" = ?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ? WHERE rowid = ?
                    """, (0, datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))
                continue

            if key not in source_dict:
                continue

            stock, opt = source_dict[key]

            price_column = {
                'yandex': '–¶–µ–Ω–∞ YM',
                'ozon': '–¶–µ–Ω–∞ OZ',
                'wildberries': '–¶–µ–Ω–∞ WB'
            }.get(table, '–¶–µ–Ω–∞ YM')

            target_cursor.execute(f"""
                SELECT "–ù–∞–ª", "–û–ø—Ç", "{price_column}", "–ù–∞—Ü–µ–Ω–∫–∞" FROM "{table}" WHERE rowid = ?
            """, (rowid,))
            current = target_cursor.fetchone()
            if not current:
                continue

            current_stock = int(current[0]) if current[0] is not None else 0
            current_opt = int(current[1]) if current[1] is not None else 0
            current_price = int(current[2]) if current[2] is not None else 0
            markup_raw = str(current[3]).replace('%', '').replace(' ', '') if current[3] else '0'

            try:
                markup = float(markup_raw)
            except:
                markup = 0.0

            try:
                price = round((float(opt) + float(opt) * markup / 100) / 100.0) * 100
            except:
                price = opt

            if (current_stock != stock) or (current_opt != opt) or (current_price != price):
                logger.debug(
                    f"‚úÖ {table} | {article} ({model}) ‚Üí "
                    f"stock: {current_stock} ‚Üí {stock}, "
                    f"opt: {current_opt} ‚Üí {opt}, "
                    f"price: {current_price} ‚Üí {price}"
                )
                target_cursor.execute(f"""
                    UPDATE "{table}"
                    SET "–ù–∞–ª" = ?, "–û–ø—Ç" = ?, "{price_column}" = ?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
                    WHERE rowid = ?
                """, (stock, opt, price, datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))

        target_conn.commit()
        logger.info(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    # üîç –û–±–Ω—É–ª—è–µ–º "–ù–∞–ª" —É —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ, –∫—Ä–æ–º–µ Sklad
    for table in target_tables:
        if not flags.get(table, True):
            continue

        logger.info(f"üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è {table}")
        cursor = target_conn.cursor()

        # –í—Å–µ —Ç–µ–∫—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute(f"""SELECT rowid, "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–ª", "–°—Ç–∞—Ç—É—Å", "–ú–æ–¥–µ–ª—å" FROM "{table}" """)
        all_rows = cursor.fetchall()

        for rowid, supplier, article, nal, status, model in all_rows:
            key = (supplier.strip(), article.strip())
            if key not in source_dict and supplier.strip() != "Sklad":
                if str(nal).strip() != "0":
                    logger.debug(f"‚ùå {table} | {article} ({model}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ ‚Üí –ù–∞–ª = 0")
                    cursor.execute(f"""
                        UPDATE "{table}" SET "–ù–∞–ª" = 0, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ? WHERE rowid = ?
                    """, (datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))

        target_conn.commit()


    source_conn.close()
    target_conn.close()
    logger.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

