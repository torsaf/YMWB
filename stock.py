"""
–ú–æ–¥—É–ª—å `stock.py` –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö Wildberries, Yandex.Market –∏ Ozon.

–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–¥—É–ª—è:

1. gen_sklad():
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite (`marketplace_base.db`) –ø–æ –∫–∞–∂–¥–æ–π –ø–ª–æ—â–∞–¥–∫–µ:
    - Wildberries: –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º (`WB Barcode`)
    - Yandex.Market: –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º (`Sklad`) —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    - Ozon: –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–∫–ª–∞–¥–∞

2. wb_update(wb_data):
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ Wildberries —á–µ—Ä–µ–∑ API `PUT /api/v3/stocks/{warehouse_id}`.

3. ym_update(ym_data):
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ Yandex.Market —á–µ—Ä–µ–∑ API `PUT /campaigns/{campaign_id}/offers/stocks`.

4. oz_update(oz_data):
    –ü–µ—Ä–µ–¥–∞—ë—Ç –æ—Å—Ç–∞—Ç–∫–∏ –≤ Ozon —á–µ—Ä–µ–∑ API `POST /v2/products/stocks`.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É `loguru` –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
- –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ `notifiers`.

–ú–æ–¥—É–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö.
"""


import sqlite3
import pandas as pd
import requests
import os
import json
from datetime import datetime, timezone
from dotenv import load_dotenv
from notifiers import get_notifier
from logger_config import logger


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path=os.path.join("System", ".env"))

telegram_got_token_error = os.getenv('telegram_got_token_error')
telegram_chat_id_error = os.getenv('telegram_chat_id_error')
telegram = get_notifier('telegram')

# üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ –±–∞–∑—ã
def gen_sklad():
    logger.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    DB_PATH = "System/marketplace_base.db"
    conn = sqlite3.connect(DB_PATH, timeout=10)
    logger.debug(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")

    wb_final, ym_final, oz_final = [], [], []

    try:
        df = pd.read_sql_query("""
            SELECT –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, Sklad, `WB Barcode`, –ù–∞–ª
            FROM marketplace
            WHERE –ù–∞–ª IS NOT NULL
        """, conn)

        logger.success(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ marketplace")

        current_time = datetime.now(timezone.utc).isoformat()
        warehouse_id = 1020002115578000

        for _, row in df.iterrows():
            mp = (row["–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"] or "").lower()
            nal = int(row["–ù–∞–ª"]) if row["–ù–∞–ª"] is not None else 0

            if mp == "wildberries" and row.get("WB Barcode"):
                wb_final.append({
                    "sku": str(row["WB Barcode"]).strip(),
                    "amount": nal
                })
            elif mp == "yandex":
                ym_final.append({
                    "sku": str(row["Sklad"]).strip(),
                    "items": [{"count": nal, "updatedAt": current_time}]
                })
            elif mp == "ozon":
                try:
                    product_id = int(row["Sklad"])  # –µ—Å–ª–∏ –Ω–µ int ‚Äî —É–ø–∞–¥—ë—Ç
                except:
                    logger.warning(f"‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π product_id –¥–ª—è OZON: {row['Sklad']}")
                    continue

                oz_final.append({
                    "offer_id": str(row["Sklad"]).strip(),
                    "product_id": product_id,
                    "stock": nal,
                    "warehouse_id": warehouse_id
                })

        logger.success(f"‚úÖ Wildberries: {len(wb_final)}, Yandex: {len(ym_final)}, Ozon: {len(oz_final)}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
    finally:
        conn.close()

    return wb_final, ym_final, oz_final

# üöö Wildberries
def wb_update(wb_data):
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(wb_data)} –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ Wildberries")
        token = os.getenv('wb_token')
        warehouse_id = int(os.getenv('warehouseId'))
        url = f'https://marketplace-api.wildberries.ru/api/v3/stocks/{warehouse_id}'
        headers = {'Authorization': token, 'stocks': 'application/json'}
        payload = {'warehouseId': warehouse_id, 'stocks': wb_data}
        response = requests.put(url, headers=headers, json=payload, timeout=10)
        if response.status_code != 204:
            raise Exception(f"–°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Wildberries: {e}")
        telegram.notify(token=telegram_got_token_error, chat_id=telegram_chat_id_error,
                        message=f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ WB: {e}")

# üöö Yandex Market
def ym_update(ym_data):
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(ym_data)} –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ Yandex Market")
        token = os.getenv('ym_token')
        campaign_id = os.getenv('campaign_id')
        url = f'https://api.partner.market.yandex.ru/campaigns/{campaign_id}/offers/stocks'
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.put(url, headers=headers, json={"skus": ym_data}, timeout=10)
        if response.status_code != 200:
            raise Exception(f"–°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Yandex: {e}")
        telegram.notify(token=telegram_got_token_error, chat_id=telegram_chat_id_error,
                        message=f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ YM: {e}")

# üöö Ozon
def oz_update(oz_data):
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(oz_data)} –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ Ozon")
        client_id = os.getenv('ozon_client_ID')
        api_key = os.getenv('ozon_API_key')
        url = 'https://api-seller.ozon.ru/v2/products/stocks'
        headers = {
            'Client-Id': client_id,
            'Api-Key': api_key,
            'Content-Type': 'application/json'
        }

        def chunk_list(data, size=100):
            for i in range(0, len(data), size):
                yield data[i:i + size]

        for chunk in chunk_list(oz_data, 100):
            payload = {"stocks": chunk}
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            if response.status_code != 200:
                raise Exception(f"–°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
            logger.success(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(chunk)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ OZON")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Ozon: {e}")
        telegram.notify(
            token=telegram_got_token_error,
            chat_id=telegram_chat_id_error,
            message=f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ OZON: {e}"
        )

# # üöÄ –ó–∞–ø—É—Å–∫
# if __name__ == "__main__":
#     wb, ym, oz = gen_sklad()

#     print("WB:", wb[:3])
#     print("YM:", ym[:3])
#     print("OZ:", oz[:3])
#

#
#     wb_update(wb)
#     ym_update(ym)
#     oz_update(oz)

