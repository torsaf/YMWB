"""
–ú–æ–¥—É–ª—å `update_sklad` –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–∂–¥—É Google Sheets –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

- gen_sklad():
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–°–ö–õ–ê–î" Google Sheets, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É "SKL" –∏ —Å—Ç–∞—Ç—É—Å—É "–ù–∞ —Å–∫–ª–∞–¥–µ",
    –æ—á–∏—â–∞–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: "–ê—Ä—Ç –º–æ–π", "–ú–æ–¥–µ–ª—å", "–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢".

- update_sklad_db(sklad_df):
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ ("ozon", "wildberries", "yandex") –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫–ª–∞–¥–∞.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ `System/stock_flags.json`.
    –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º "Sklad":
        - –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–≤—ã–∫–ª.": —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ 0.
        - –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–∫–ª–∞–¥–µ: –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –∏ –æ–ø—Ç–æ–≤—É—é —Ü–µ–Ω—É.
        - –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ 0.

–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ `loguru` –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è, –≤–∫–ª—é—á–∞—è:
        - –ù–∞—á–∞–ª–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π.
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –æ–ø—Ç–æ–≤—ã—Ö —Ü–µ–Ω.
        - –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ç–æ–≤–∞—Ä—ã.
        - –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–ª–∞–≥–æ–≤ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
"""


from logger_config import logger
from datetime import datetime
import pandas as pd
import gspread
import sqlite3
import json



def gen_sklad():
    logger.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å–∫–ª–∞–¥–∞ (Google Sheets)")
    pd.set_option('display.max_columns', None)
    pd.set_option('display.expand_frame_repr', False)
    gc = gspread.service_account(filename='System/my-python-397519-3688db4697d6.json')
    sh = gc.open("–ö–ê–ó–ù–ê")
    worksheet = sh.worksheet("–°–ö–õ–ê–î")
    data = worksheet.get('A:W')
    logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(data) - 1} —Å—Ç—Ä–æ–∫ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)")

    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    data = [row for row in data if any(cell.strip() for cell in row)]
    data = [[cell.strip() for cell in row] for row in data]

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –°—Ç–∞—Ç—É—Å = –ù–∞ —Å–∫–ª–∞–¥–µ
    filtered_data = [
        row for row in data[1:]
        if len(row) >= 2 and row[0] == "–ù–∞ —Å–∫–ª–∞–¥–µ"
    ]
    logger.debug(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫ '–ù–∞ —Å–∫–ª–∞–¥–µ': {len(filtered_data)}")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    columns = data[0]
    sklad = pd.DataFrame(filtered_data, columns=columns)

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
    def _pick_col(df, variants):
        cols = list(df.columns)
        low = {c.strip().lower(): c for c in cols}
        for v in variants:
            key = v.strip().lower()
            if key in low:
                return low[key]
            for c in cols:
                if c.strip().lower().replace("‚ÇΩ", "").replace("$", "") == key:
                    return c
        return None

    col_art = _pick_col(sklad, ["–ê—Ä—Ç –º–æ–π", "–ê—Ä—Ç–∏–∫—É–ª", "–ê—Ä—Ç"])
    col_model = _pick_col(sklad, ["–ú–æ–¥–µ–ª—å", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ"])
    col_nal = _pick_col(sklad, ["–ù–∞–ª–∏—á–∏–µ", "–û—Å—Ç–∞—Ç–æ–∫", "–û—Å—Ç–∞—Ç–∫–∏"])
    col_opt = _pick_col(sklad, ["–û–ü–¢", "–û–ü–¢$", "–û–ü–¢ ‚ÇΩ", "–û–ø—Ç", "OPT"])
    col_rrc = _pick_col(sklad, ["–†–†–¶", "–†–†–¶$", "–†–†–¶ ‚ÇΩ", "RRC", "–†–æ–∑–Ω–∏—Ü–∞"])

    missing = [n for n, c in {
        "–ê—Ä—Ç –º–æ–π": col_art, "–ú–æ–¥–µ–ª—å": col_model, "–ù–∞–ª–∏—á–∏–µ": col_nal, "–û–ü–¢": col_opt
    }.items() if c is None]
    if missing:
        raise KeyError(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ Google Sheets: {', '.join(missing)}")

    # –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    base_cols = [col_art, col_model, col_nal, col_opt]
    select_cols = base_cols + ([col_rrc] if col_rrc else [])
    sklad = sklad[select_cols].rename(columns={
        col_art: "–ê—Ä—Ç –º–æ–π",
        col_model: "–ú–æ–¥–µ–ª—å",
        col_nal: "–ù–∞–ª–∏—á–∏–µ",
        col_opt: "–û–ü–¢",
        **({col_rrc: "–†–†–¶"} if col_rrc else {})
    })

    # –µ—Å–ª–∏ –†–†–¶ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –Ω—É–ª—è–º–∏
    if "–†–†–¶" not in sklad.columns:
        sklad["–†–†–¶"] = 0

    # —á–∏—Å—Ç–∏–º —á–∏—Å–ª–∞
    for num_col in ("–ù–∞–ª–∏—á–∏–µ", "–û–ü–¢", "–†–†–¶"):
        sklad[num_col] = (
            sklad[num_col]
            .astype(str)
            .str.replace(r"[^\d\-]", "", regex=True)
            .replace({"": "0", "-": "0"})
            .astype(int)
        )

    logger.success("üì¶ –°–∫–ª–∞–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
    return sklad


def upsert_ymwb_prices_from_sklad(sklad_df):
    db_path = "System/!YMWB.db"
    conn = sqlite3.connect(db_path, timeout=10)
    cur = conn.cursor()

    cur.execute("""
        CREATE TABLE IF NOT EXISTS "prices" (
            "–ü–æ—Å—Ç–∞–≤—â–∏–∫"    TEXT,
            "–ê—Ä—Ç–∏–∫—É–ª"      TEXT,
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" TEXT,
            "–ù–∞–ª–∏—á–∏–µ"      INTEGER,
            "–û–ü–¢"          INTEGER,
            "–†–†–¶"          INTEGER
        )
    """)
    cur.execute('PRAGMA table_info("prices")')
    cols = {r[1] for r in cur.fetchall()}
    if "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" not in cols:
        cur.execute('ALTER TABLE "prices" ADD COLUMN "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" TEXT')
    if "–†–†–¶" not in cols:
        cur.execute('ALTER TABLE "prices" ADD COLUMN "–†–†–¶" INTEGER')

    rows = 0
    for _, r in sklad_df.iterrows():
        art   = str(r.get("–ê—Ä—Ç –º–æ–π", "")).strip()
        model = str(r.get("–ú–æ–¥–µ–ª—å", "")).strip()
        nal   = int(r.get("–ù–∞–ª–∏—á–∏–µ", 0) or 0)
        opt   = int(r.get("–û–ü–¢", 0) or 0)
        rrc   = int(r.get("–†–†–¶", 0) or 0)
        if not art:
            continue

        cur.execute("""
            UPDATE "prices"
               SET "–ù–∞–ª–∏—á–∏–µ" = ?, "–û–ü–¢" = ?, "–†–†–¶" = ?,
                   "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" = COALESCE(?, "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
             WHERE UPPER(TRIM("–ü–æ—Å—Ç–∞–≤—â–∏–∫")) = UPPER('Sklad')
               AND TRIM(CAST("–ê—Ä—Ç–∏–∫—É–ª" AS TEXT)) = TRIM(?)
        """, (nal, opt, rrc, model if model else None, art))
        if cur.rowcount == 0:
            cur.execute("""
                INSERT INTO "prices"
                    ("–ü–æ—Å—Ç–∞–≤—â–∏–∫","–ê—Ä—Ç–∏–∫—É–ª","–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ","–ù–∞–ª–∏—á–∏–µ","–û–ü–¢","–†–†–¶")
                VALUES ('Sklad', ?, ?, ?, ?, ?)
            """, (art, model, nal, opt, rrc))
        rows += 1

    # —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    all_current_arts = {str(r.get("–ê—Ä—Ç –º–æ–π", "")).strip()
                        for _, r in sklad_df.iterrows()
                        if str(r.get("–ê—Ä—Ç –º–æ–π", "")).strip()}
    if all_current_arts:
        cur.execute("""
            DELETE FROM "prices"
             WHERE UPPER(TRIM("–ü–æ—Å—Ç–∞–≤—â–∏–∫")) = UPPER('Sklad')
               AND TRIM(CAST("–ê—Ä—Ç–∏–∫—É–ª" AS TEXT)) NOT IN ({})
        """.format(",".join("?" * len(all_current_arts))), tuple(all_current_arts))
    else:
        cur.execute("""
            DELETE FROM "prices"
             WHERE UPPER(TRIM("–ü–æ—Å—Ç–∞–≤—â–∏–∫")) = UPPER('Sklad')
        """)
    deleted = cur.rowcount

    conn.commit()
    conn.close()
    logger.success(f"üßæ !YMWB.db ‚Üí prices —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å–æ —Å–∫–ª–∞–¥–æ–º, –æ–±–Ω–æ–≤–ª–µ–Ω–æ/–¥–æ–±–∞–≤–ª–µ–Ω–æ: {rows}, —É–¥–∞–ª–µ–Ω–æ: {deleted}")



def update_sklad_db(sklad_df):
    logger.info("üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ —Å–∫–ª–∞–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    try:
        with open("System/stock_flags.json", "r", encoding="utf-8") as f:
            flags = json.load(f)
            logger.debug(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–ª–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {flags}")
    except:
        flags = {"yandex": True, "ozon": True, "wildberries": True}

    conn = sqlite3.connect("System/marketplace_base.db", timeout=10)
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Sklad
    if not flags.get("suppliers", {}).get("Sklad", True):
        logger.info("‚õî –ü–æ—Å—Ç–∞–≤—â–∏–∫ 'Sklad' –æ—Ç–∫–ª—é—á—ë–Ω —Ñ–ª–∞–≥–æ–º ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        conn.close()
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∏–∑ Excel-—Ñ–∞–π–ª–∞ —Å–∫–ª–∞–¥–∞
    sklad_dict = {
        str(row["–ê—Ä—Ç –º–æ–π"]): (int(row["–ù–∞–ª–∏—á–∏–µ"]), int(row["–û–ü–¢"]))
        for _, row in sklad_df.iterrows()
    }
    logger.debug(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(sklad_dict)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Å–∫–ª–∞–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    # –í—ã–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã Sklad –∏–∑ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""
        SELECT rowid, –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, Sklad, –°—Ç–∞—Ç—É—Å, –ú–æ–¥–µ–ª—å, –ù–∞–ª, –û–ø—Ç, "%", –¶–µ–Ω–∞
        FROM marketplace
        WHERE COALESCE(Invask,'')='' 
          AND COALESCE(Okno,'')='' 
          AND COALESCE(United,'')='' 
          AND TRIM(COALESCE(Sklad,''))<>''
    """)
    rows = cursor.fetchall()

    for row in rows:
        rowid, marketplace, art_mc, status, model, current_nal, current_opt, markup_raw, current_price = row

        table_flag = flags.get(marketplace.lower(), True)
        if not table_flag:
            logger.info(f"‚õî {marketplace} –æ—Ç–∫–ª—é—á—ë–Ω —Ñ–ª–∞–≥–æ–º ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω")
            continue

        art_mc_str = str(art_mc).strip()
        status = (status or "").strip().lower()
        model = model.strip() if model else "‚Äî"
        current_nal = int(current_nal) if current_nal is not None else 0
        current_opt = int(current_opt) if current_opt is not None else 0
        current_price = int(current_price) if current_price is not None else 0
        markup_raw = str(markup_raw).replace('%', '').replace(' ', '') if markup_raw else '0'

        try:
            markup = float(markup_raw)
        except:
            markup = 0.0

        if art_mc_str in sklad_dict:
            nal, opt = sklad_dict[art_mc_str]

            try:
                new_price = round((opt + opt * markup / 100) / 100.0) * 100
            except:
                new_price = opt

            if status == "–≤—ã–∫–ª." and current_nal == 0 and nal >= 0:
                if (current_opt == opt) and (current_price == new_price):
                    logger.debug(
                        f"‚è© {marketplace} | {art_mc_str} ({model}) ‚Äî –≤—ã–∫–ª—é—á–µ–Ω, –ù–∞–ª=0, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Üí –ø—Ä–æ–ø—É—Å–∫"
                    )
                    continue

            if (current_nal != nal) or (current_opt != opt) or (current_price != new_price):
                logger.debug(
                    f"‚úÖ {marketplace} | {art_mc_str} ({model}) ‚Üí "
                    f"stock: {current_nal} ‚Üí {nal}, "
                    f"opt: {current_opt} ‚Üí {opt}, "
                    f"price: {current_price} ‚Üí {new_price}"
                )
                cursor.execute("""
                    UPDATE marketplace
                    SET –ù–∞–ª = ?, –û–ø—Ç = ?, –¶–µ–Ω–∞ = ?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
                    WHERE rowid = ?
                """, (nal, opt, new_price, datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))

        else:
            # –ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ ‚Äî –æ–±–Ω—É–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if current_nal != 0:
                if status == "–≤—ã–∫–ª." and current_nal == 0:
                    logger.debug(f"‚è© {marketplace} | {art_mc_str} ({model}) ‚Äî –≤—ã–∫–ª—é—á–µ–Ω –∏ —É–∂–µ –æ–±–Ω—É–ª—ë–Ω ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                    continue
                logger.debug(f"‚ùå {marketplace} | {art_mc_str} ({model}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ ‚Üí stock: {current_nal} ‚Üí 0")
                cursor.execute("""
                    UPDATE marketplace
                    SET –ù–∞–ª = ?, "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è" = ?
                    WHERE rowid = ?
                """, (0, datetime.now().strftime("%d.%m.%Y %H:%M"), rowid))

    conn.commit()
    conn.close()
    logger.success("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


