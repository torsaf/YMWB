import os
import sys
import signal
from pathlib import Path
from stock import gen_sklad, wb_update, ym_update, oz_update
from order_notifications import check_for_new_orders
from price_updater_master import update_all_prices
import stock
from dotenv import load_dotenv
from pathlib import Path
load_dotenv(dotenv_path=Path(__file__).parent / "System" / ".env")
from logger_config import logger


# üì¶ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
os.chdir(os.path.dirname(os.path.abspath(__file__)))


# üì¨ –¢–µ–ª–µ–≥—Ä–∞–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
def send_telegram_message(message: str):
    stock.telegram.notify(
        token=stock.telegram_got_token_error,
        chat_id=stock.telegram_chat_id_error,
        message=message
    )


# ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª—É
def handle_exit_signal(signum, frame):
    logger.info("üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    send_telegram_message("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚ùóÔ∏è")
    sys.exit(0)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
signal.signal(signal.SIGTERM, handle_exit_signal)
signal.signal(signal.SIGINT, handle_exit_signal)


# üõ† –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è try/except —Å –ª–æ–≥–æ–º –∏ —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º
def run_safe(action_description: str, func):
    try:
        logger.info(f"‚ñ∂ –ù–∞—á–∞–ª–æ: {action_description}")
        func()
        logger.success(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {action_description}")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {action_description}")
        send_telegram_message(f"üò® –û—à–∏–±–∫–∞ –ø—Ä–∏ {action_description}: {e}")
        sys.exit(1)


# üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
def run_price_updates():
    try:
        logger.info("üì¶ –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏...")
        wb_data, ym_data, oz_data = gen_sklad()
        logger.success("‚úÖ –û—Å—Ç–∞—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
        sys.exit(1)

    tasks = [
        ("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ WB", lambda: wb_update(wb_data)),
        ("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ YM", lambda: ym_update(ym_data)),
        ("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ OZ", lambda: oz_update(oz_data)),
    ]

    for description, task in tasks:
        run_safe(description, task)


# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    logger.info("üöÄ –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
    # send_telegram_message("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞‚≠êÔ∏è")

    run_price_updates()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–∫–ª–∞–¥–æ–≤
    run_safe("–ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤", check_for_new_orders)
    run_safe("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ü–µ–Ω", update_all_prices)

    logger.success("üèÅ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


if __name__ == "__main__":
    main()
